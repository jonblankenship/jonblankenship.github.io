<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://blog.jonblankenship.com//feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.jonblankenship.com//" rel="alternate" type="text/html" /><updated>2019-09-30T16:05:24-05:00</updated><id>https://blog.jonblankenship.com//feed.xml</id><title type="html">Jon Blankenship</title><subtitle>Developer.</subtitle><entry><title type="html">Create/Edit Screens, Bindable Layouts, and More</title><link href="https://blog.jonblankenship.com//2019/07/21/create-edit-screens-bindable-layouts-and-more-update-2019-07-21/" rel="alternate" type="text/html" title="Create/Edit Screens, Bindable Layouts, and More" /><published>2019-07-21T02:00:00-05:00</published><updated>2019-07-21T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/07/21/create-edit-screens-bindable-layouts-and-more-update-2019-07-21</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/07/21/create-edit-screens-bindable-layouts-and-more-update-2019-07-21/">&lt;p&gt;Since my &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/09/moving-from-http-triggered-azure-functions-to-web-api-update-2019-07-09/&quot;&gt;last update&lt;/a&gt; I’ve been focused on building the Create Alert Definition screen in the Stock Alerts mobile app project. It’s been slow but steady progress, and I’m happy to report that both the Create Alert Definition and Edit Alert Definition screens are now functional. (Technically they’re both the same screen, but I’ve been treating them separately from a work management perspective.)&lt;/p&gt;

&lt;p&gt;For those just tuning in, these &lt;a href=&quot;https://blog.jonblankenship.com/category/side-projects/stock-alerts/&quot;&gt;past posts&lt;/a&gt; will bring you up to speed on the &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/25/working-on-a-new-side-project-in-public/&quot;&gt;project&lt;/a&gt;, the &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/28/stock-alerts-features/&quot;&gt;features&lt;/a&gt; I’m building, the &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/01/stock-alerts-infrastructure/&quot;&gt;infrastructure&lt;/a&gt;, etc…&lt;/p&gt;

&lt;h2 id=&quot;create-alert-definition-screen&quot;&gt;Create Alert Definition Screen&lt;/h2&gt;

&lt;p&gt;The MVP version of the Create Alert Definition screen is fairly simple – you search for and select a stock, enter one or more criteria for the alert, and click Save. I &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/03/stock-alerts-update-2019-07-03/&quot;&gt;talked about&lt;/a&gt; the search functionality a couple of weeks ago, so the next task was to build the alert criteria.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;20190720_101839.gif&quot; alt=&quot;Create Alert Definition Screen&quot; class=&quot;w-25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The API supports complex, multi-level composite criteria, but for this version I’m building a UI that supports just one level of criteria combined with an &lt;strong&gt;AND&lt;/strong&gt; or &lt;strong&gt;OR&lt;/strong&gt; Boolean operator, as demonstrated in the GIF, to keep things simple.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.jonblankenship.com/2019/07/21/create-edit-screens-bindable-layouts-and-more-update-2019-07-21/Alert Criteria Section&quot;&gt;&lt;img src=&quot;CriteriaSection-300x163.png&quot; alt=&quot;C&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;segmentedbuttongroup&quot;&gt;SEGMENTEDBUTTONGROUP&lt;/h3&gt;

&lt;p&gt;To build the criteria section, I just needed a couple of toggle buttons to switch the composite operator between AND and OR, and a control to list &lt;code class=&quot;highlighter-rouge&quot;&gt;0..n&lt;/code&gt; criteria rules.&lt;/p&gt;

&lt;p&gt;For the AND/OR selector, I chose to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentedButtonGroup&lt;/code&gt; control from the &lt;a href=&quot;https://github.com/XAM-Consulting/FreshEssentials&quot;&gt;FreshEssentials&lt;/a&gt; library, which provides a look and feel similar to the iOS segmented control.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;AndOrSelector-300x94.png&quot; alt=&quot;And/Or Selector&quot; class=&quot;w-25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Integrating it into the view was fairly straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xaml&quot;&gt;&amp;lt;freshEssentials:SegmentedButtonGroup OnColor=&quot;{StaticResource DarkGrayColor}&quot; OffColor=&quot;{StaticResource WhiteColor}&quot; 
                                      SelectedIndex=&quot;{Binding SelectedOperatorButtonIndex, Mode=TwoWay}&quot; 
                                      HorizontalOptions=&quot;Center&quot; HeightRequest=&quot;30&quot; WidthRequest=&quot;120&quot; CornerRadius=&quot;10&quot;&amp;gt;
    &amp;lt;freshEssentials:SegmentedButtonGroup.SegmentedButtons&amp;gt;
        &amp;lt;freshEssentials:SegmentedButton Title=&quot;AND&quot;&amp;gt;&amp;lt;/freshEssentials:SegmentedButton&amp;gt;
        &amp;lt;freshEssentials:SegmentedButton Title=&quot;OR&quot;&amp;gt;&amp;lt;/freshEssentials:SegmentedButton&amp;gt;
    &amp;lt;/freshEssentials:SegmentedButtonGroup.SegmentedButtons&amp;gt;
&amp;lt;/freshEssentials:SegmentedButtonGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I bind the &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedIndex&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedOperatorButtonIndex&lt;/code&gt; property on the view model.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectedOperatorButtonIndex&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I considered creating a converter to convert between the &lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaOperator&lt;/code&gt; enum value and its corresponding value, but this does the job and is fine for now.&lt;/p&gt;

&lt;h3 id=&quot;bindable-layouts&quot;&gt;BINDABLE LAYOUTS&lt;/h3&gt;

&lt;p&gt;Working with the individual criteria would require a little more work.&lt;/p&gt;

&lt;p&gt;To support the dynamic adding/removing of criteria, I knew I’d need a control like WPF’s &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol?view=netframework-4.8&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ItemsControl&lt;/code&gt;&lt;/a&gt;, which binds to a collection of items on the data context and renders a view for each item. I would need something similar for Xamarin.Forms.&lt;/p&gt;

&lt;p&gt;I was pleased to learn that Xamarin.Forms now has &lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/layouts/bindable-layouts&quot;&gt;bindable layouts&lt;/a&gt;, which were introduced sometime since the last time I did any Xamarin.Forms work, which was a couple of years ago. Bindable layouts allow the user to bind a layout control ( any class that derives from &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/xamarin.forms.layout-1?view=xamarin-forms&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Layout&lt;/code&gt;&lt;/a&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;StackLayout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Grid&lt;/code&gt;, etc…) to a collection on the data context to control how the layout is populated, using data templates to define how the items are rendered.&lt;/p&gt;

&lt;p&gt;The data binding of bindable layouts is familiar and consistent with other Xamarin.Forms data-bound controls. Let’s see how it works in the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/Views/AlertDefinitions/EditAlertDefinitionPage.xaml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EditAlertDefinitionPage&lt;/code&gt;&lt;/a&gt; view. Here’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackLayout&lt;/code&gt; that contains the list of criteria:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xaml&quot;&gt;&amp;lt;StackLayout BindableLayout.ItemsSource=&quot;{Binding CriteriaCollection}&quot;&amp;gt;
    &amp;lt;BindableLayout.ItemTemplate&amp;gt;
        &amp;lt;DataTemplate&amp;gt;
            &amp;lt;alertDefinitions:CriteriaView BindingContext=&quot;{Binding}&quot;&amp;gt;&amp;lt;/alertDefinitions:CriteriaView&amp;gt;
        &amp;lt;/DataTemplate&amp;gt;
    &amp;lt;/BindableLayout.ItemTemplate&amp;gt;
&amp;lt;/StackLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I only have one &lt;code class=&quot;highlighter-rouge&quot;&gt;DataTemplate&lt;/code&gt; defined, but the ability to leverage a &lt;code class=&quot;highlighter-rouge&quot;&gt;DataTemplateSelector&lt;/code&gt; to render different &lt;code class=&quot;highlighter-rouge&quot;&gt;DataTemplate&lt;/code&gt;s will likely come in handy in the future as I add more types of criteria.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaCollection&lt;/code&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableCollection&lt;/code&gt; (observable, since the UI needs to update when the user adds or removes a new criteria) of &lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaViewModel&lt;/code&gt;s on the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/ViewModels/AlertDefinitions/EditAlertDefinitionPageViewModel.cs&quot;&gt;view model&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObservableCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaCollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObservableCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/Views/AlertDefinitions/CriteriaView.xaml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaView&lt;/code&gt;&lt;/a&gt; is a custom view that simply has a single-row &lt;code class=&quot;highlighter-rouge&quot;&gt;Grid&lt;/code&gt; to hold the individual controls for each criteria.&lt;/p&gt;

&lt;h3 id=&quot;adding-and-removing-criteria&quot;&gt;ADDING AND REMOVING CRITERIA&lt;/h3&gt;

&lt;p&gt;The adding and removing of the criteria is handled by methods on the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/ViewModels/AlertDefinitions/EditAlertDefinitionPageViewModel.cs&quot;&gt;view model&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddCriteriaCommand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecuteAddCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAddCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;AddCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CriteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AlertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NavigationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaViewModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CriteriaCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CriteriaCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the button to remove a criteria is on the individual criteria views, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ICommand&lt;/code&gt; for removal is located on the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/ViewModels/AlertDefinitions/CriteriaViewModel.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaViewModel&lt;/code&gt;&lt;/a&gt;, which raises an event to alert the parent &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/ViewModels/AlertDefinitions/EditAlertDefinitionPageViewModel.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EditAlertDefinitionPageViewModel&lt;/code&gt;&lt;/a&gt; to remove the specific criteria from its collection:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoveCriteriaCommand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecuteRemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteRemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I won’t go into too much more detail regarding the specifics of managing the criteria. It’s mostly typical MVVM.&lt;/p&gt;

&lt;h3 id=&quot;saving-the-alert-definition&quot;&gt;SAVING THE ALERT DEFINITION&lt;/h3&gt;

&lt;p&gt;I added simple validation to the view models that we’ve been looking at that fires when the &lt;code class=&quot;highlighter-rouge&quot;&gt;SaveCommand&lt;/code&gt; is executed. If any validation on the alert definition or a child criteria fails, then I just display a red message at the bottom of the screen and prevent the save from occurring. It’s very basic, but good enough for now.&lt;/p&gt;

&lt;p&gt;The act of saving the alert definition by executing a POST request to the Stock Alerts API is handled by the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/Services/AlertDefinitions/AlertDefinitionsService.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinitionsService&lt;/code&gt;&lt;/a&gt;, which is a wrapper around an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; for communicating with the alert-definition-related endpoints on the API.&lt;/p&gt;

&lt;h2 id=&quot;edit-alert-definition&quot;&gt;Edit Alert Definition&lt;/h2&gt;

&lt;p&gt;Once I had the Create Alert Definition screen working and creating alert definitions, making the modifications to enable the editing and saving of existing alert definitions was fairly straightforward.&lt;/p&gt;

&lt;p&gt;Here’s what it took:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make alert definitions on the &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertsPageViewModel&lt;/code&gt; selectable, and bind the &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedItem&lt;/code&gt; to property &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedAlertDefinition&lt;/code&gt; on the view model, which navigates to the &lt;code class=&quot;highlighter-rouge&quot;&gt;EditAlertDefinitionPage&lt;/code&gt; passing the selected &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt; as a navigation parameter (I’m using &lt;a href=&quot;https://prismlibrary.github.io/index.html&quot;&gt;Prism’s&lt;/a&gt; &lt;a href=&quot;https://prismlibrary.github.io/docs/xamarin-forms/navigation/navigation-basics.html&quot;&gt;navigation service&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Modify &lt;code class=&quot;highlighter-rouge&quot;&gt;EditAlertDefinitionPageViewModel.OnNavigatedTo(..)&lt;/code&gt; to check for a &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedAlertDefinition&lt;/code&gt; navigation parameter, and if found, call private &lt;code class=&quot;highlighter-rouge&quot;&gt;InitializeForEdit()&lt;/code&gt; to set various properties appropriately for edit rather than create mode.&lt;/li&gt;
  &lt;li&gt;Make minor adjustments to &lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaViewModel&lt;/code&gt; appropriate for edit mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;20190720_163746.gif&quot; alt=&quot;Edit Alert Definition Screen&quot; class=&quot;w-25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At some point I’ll fix the orange color of the selected item in the list view and the sizing bug of the “remove” icon on individual criteria, but not today. We’re functioning, and that’s good enough for now.&lt;/p&gt;

&lt;h2 id=&quot;other-ui-stuff&quot;&gt;Other UI Stuff&lt;/h2&gt;

&lt;p&gt;I also spent some time this week tweaking the colors and layouts of some of the app’s screens, added a loading/busy indicator to several screens, and made a few other minor UI adjustments.&lt;/p&gt;

&lt;p&gt;I’m trying to keep the UI simple and clean.&lt;/p&gt;

&lt;p&gt;I’m not a designer, and I’m much stronger on API and backend development, but I do the best I can with the pixels.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Well that’s all I’ve got for this week! This coming week I’ll continue to work on the other screens in the app. It shouldn’t take too long to get the app to MVP state.&lt;/p&gt;

&lt;p&gt;I’m also working on a post about how I build the criteria rules evaluation engine for Stock Alerts using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Specification_pattern&quot;&gt;specification pattern&lt;/a&gt;, so keep an eye out for that in the next week or two.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;-Jon&lt;/p&gt;</content><author><name></name></author><category term="bindable-layouts" /><category term="freshessentials" /><category term="icommand" /><category term="mvvm" /><category term="prism" /><category term="segmentedbuttongroup" /><category term="stock-alerts-update" /><category term="view" /><category term="viewmodel" /><category term="xamarin.forms" /><summary type="html">Since my last update I’ve been focused on building the Create Alert Definition screen in the Stock Alerts mobile app project. It’s been slow but steady progress, and I’m happy to report that both the Create Alert Definition and Edit Alert Definition screens are now functional. (Technically they’re both the same screen, but I’ve been treating them separately from a work management perspective.)</summary></entry><entry><title type="html">Moving from HTTP-Triggered Azure Functions to Web API</title><link href="https://blog.jonblankenship.com//2019/07/09/moving-from-http-triggered-azure-functions-to-web-api-update-2019-07-09/" rel="alternate" type="text/html" title="Moving from HTTP-Triggered Azure Functions to Web API" /><published>2019-07-09T02:00:00-05:00</published><updated>2019-07-09T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/07/09/moving-from-http-triggered-azure-functions-to-web-api-update-2019-07-09</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/07/09/moving-from-http-triggered-azure-functions-to-web-api-update-2019-07-09/">&lt;p&gt;This past weekend was a long one due to the Fourth of July, and despite a weekend filled with cookouts, swimming, fireworks, an anniversary date night, and a trip to St. Louis, I was able to knock off an important task on my &lt;a href=&quot;https://blog.jonblankenship.com/category/side-projects/stock-alerts/&quot;&gt;side project&lt;/a&gt;‘s &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/TODO.md&quot;&gt;TODO List&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;refactoring-http-triggered-azure-functions-into-a-web-api-service&quot;&gt;Refactoring HTTP-Triggered Azure Functions into a Web API Service&lt;/h2&gt;

&lt;p&gt;When I started work on Stock Alerts, I began with the &lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions/&quot;&gt;Azure Functions&lt;/a&gt; for retrieving quotes and evaluating alert definitions, because they were the most interesting pieces to me.&lt;/p&gt;

&lt;p&gt;I then started thinking about the API endpoints that I’d need to support a mobile client. I figured I wouldn’t need too many endpoints to support the very minimal functionality that I was aiming to implement for MVP, and I already had the Azure Functions project, so I figured I’d just stand up a few &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook&quot;&gt;HTTP-triggered&lt;/a&gt; functions for my API. After all, I could always refactor them into their own proper web API project later.&lt;/p&gt;

&lt;p&gt;It was midway through implementing authentication that I realized that rather than continuing to try to fit the endpoints that I needed into Azure Functions, it made sense to move the HTTP-triggered functions into their own web API project with a separate app service in Azure sooner rather than later.&lt;/p&gt;

&lt;p&gt;So that’s what I did.&lt;/p&gt;

&lt;p&gt;I performed the refactor Thursday/Friday, and fiddled with the build and release pipelines in Azure DevOps in my free moments on Friday/Saturday. Monday morning I switched the app to use the new API.&lt;/p&gt;

&lt;p&gt;Thankfully the refactoring of the code was fairly simple because my functions, much like good controller methods, were thin – they simply received the HTTP request, deserialized it, performed any necessary request-level validation, and delegated processing to the domain layer which lives in a separate assembly. The controllers in the Web API project that I created ended up being very similar.&lt;/p&gt;

&lt;p&gt;I’m now closer to the MVP infrastructure that I &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/01/stock-alerts-infrastructure/&quot;&gt;mentioned&lt;/a&gt; a week ago, depicted below (I’m just missing &lt;code class=&quot;highlighter-rouge&quot;&gt;StockAlerts.WebApp&lt;/code&gt; now):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-MVP-Infrastructure-Resources.png&quot; alt=&quot;Stock Alerts MVP Infrastructure Resources&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I love the feeling of checking items off of my TODO list.&lt;/p&gt;

&lt;h2 id=&quot;why-i-chose-web-api-over-http-triggered-azure-functions&quot;&gt;Why I Chose Web API Over HTTP-Triggered Azure Functions&lt;/h2&gt;

&lt;p&gt;So why did I choose to move my API methods from my Functions project to their own Web API project and service?&lt;/p&gt;

&lt;p&gt;A few key reasons: 1. Inability to configure middleware for Azure Functions 2. Prefer controller methods over Azure Functions 3. API usage patterns&lt;/p&gt;

&lt;p&gt;Let’s talk about these one-by-one…&lt;/p&gt;

&lt;h3 id=&quot;aspnet-core-middleware&quot;&gt;ASP.NET CORE MIDDLEWARE&lt;/h3&gt;

&lt;p&gt;ASP.NET Core gives the developer the ability to plug in logic into the request/response pipeline. This logic is referred to as middleware. &lt;a href=&quot;https://twitter.com/andrewlocknet&quot;&gt;Andrew Lock&lt;/a&gt; has a great &lt;a href=&quot;https://andrewlock.net/asp-net-core-in-action-what-is-middleware/&quot;&gt;post&lt;/a&gt; on what it is and how it works in an ASP.NET Core web app.&lt;/p&gt;

&lt;p&gt;ASP.NET Core has default middleware that it executes during the normal course of processing a request and response, but it also allows the developer to configure at startup what additional middleware should execute with each request, including custom middleware. Middleware is generally used for performing cross-cutting tasks – things like logging, handling exceptions, rendering views, and performing authentication, to name a few.&lt;/p&gt;

&lt;p&gt;Early in my adventures into Azure Functions I learned that the developer doesn’t have the ability to configure the middleware that executes during an HTTP-triggered function invocation. Sure, some folks have rolled their own middleware pattern in Azure Functions (like &lt;a href=&quot;https://dasith.me/2018/01/20/using-azure-functions-httptrigger-as-web-api/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@emanuelcasco/implement-middleware-pattern-in-azure-functions-d8e9f94626a5&quot;&gt;here&lt;/a&gt;), but I didn’t want to invest that much effort into building something that an ASP.NET Core Web API gives me for free.&lt;/p&gt;

&lt;p&gt;My custom middleware needs aren’t too many: for a typical web API I add custom error-handling middleware and enable authentication middleware.&lt;/p&gt;

&lt;p&gt;Though I was able to implement workarounds to accomplish these tasks to work in my functions, they weren’t nearly as clean as accomplishing the same thing with middleware in an ASP.NET Core Web API.&lt;/p&gt;

&lt;h4 id=&quot;error-handling&quot;&gt;&lt;em&gt;Error Handling&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;My preferred approach to handling exceptions on recent Web API projects has been to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt; class that catches any unhandled exception during the processing of the request and turns it into the appropriate HTTP response. The code can be found &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts/StockAlerts.Api/Middleware/ErrorHandlingMiddleware.cs&quot;&gt;here&lt;/a&gt;. Adding it to the pipeline is as simple as one line in &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorHandlingMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To accomplish similar functionality in my Azure Functions required an additional Nuget package (&lt;a href=&quot;https://www.nuget.org/packages/PostSharp/&quot;&gt;PostSharp&lt;/a&gt;), a custom attribute, and a &lt;code class=&quot;highlighter-rouge&quot;&gt;[HandleExceptions]&lt;/code&gt; on top of all of my functions. Not terrible, but I’d rather not have the extra package and have to remember to manually decorate my functions to get error-handling.&lt;/p&gt;

&lt;h4 id=&quot;authenticationauthorization&quot;&gt;&lt;em&gt;Authentication/Authorization&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;To turn on token-based authentication/authorization for an ASP.NET Core Web API endpoint, you must configure the authentication, JWT bearer, and authorization options in &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt;, add the authentication middleware with &lt;code class=&quot;highlighter-rouge&quot;&gt;app.UseAuthentication();&lt;/code&gt;, and decorate your controller methods with the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Authorize]&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;To implement token-based authentication/authorization on my Azure Functions, there wasn’t an easy way for me to simply decorate a function with an &lt;code class=&quot;highlighter-rouge&quot;&gt;[Authorize]&lt;/code&gt; attribute and let the framework make sure that the user could invoke the function. Instead, for each function I had to use &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizationLevel.Anonymous&lt;/code&gt; and manually check for a valid &lt;code class=&quot;highlighter-rouge&quot;&gt;ClaimsPrincipal&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;return new UnauthorizedResult()&lt;/code&gt; if there wasn’t one.&lt;/p&gt;

&lt;p&gt;It worked, but it wasn’t pretty.&lt;/p&gt;

&lt;p&gt;Beyond that, I had trouble getting it to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;Token-Expired&lt;/code&gt; header on responses when the auth token has expired. After switching over to Web API, this just works with the configuration I have in place.&lt;/p&gt;

&lt;h3 id=&quot;prefer-controllers-over-functions&quot;&gt;PREFER CONTROLLERS OVER FUNCTIONS&lt;/h3&gt;

&lt;p&gt;As I began to add multiple HTTP-triggered functions that manipulated the same server resource, I grouped them into a single file per resource, similar to how controllers are often organized. But even though the methods were grouped like controllers, there were significant differences at the code level that cause me to prefer the controller implementations over the Azure Functions implementations.&lt;/p&gt;

&lt;p&gt;Let’s compare the two side-by-side…&lt;/p&gt;

&lt;p&gt;Here’s an Azure Function for getting an alert definition by ID:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GetAlertDefinition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleExceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAlertDefinitionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpTrigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthorizationLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Anonymous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alert-definitions/{alertDefinitionId}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;claimsPrincipal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAuthenticatedPrincipal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;claimsPrincipal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnauthorizedResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertDefinitionsService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAlertDefinitionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;claimsPrincipal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GuardIsAuthorizedForAppUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OkObjectResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s the analogous controller method for getting an alert definition by ID:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{alertDefinitionId}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertDefinitionsService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAlertDefinitionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GuardIsAuthorizedForAppUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OkObjectResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Observations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The controller method is shorter.&lt;/li&gt;
  &lt;li&gt;The controller method is able to accept ID parameters as GUIDs, avoiding manual conversion.&lt;/li&gt;
  &lt;li&gt;The controller method declares the HTTP verb and route more cleanly (in my opinion) as method attributes rather than a parameter attribute.&lt;/li&gt;
  &lt;li&gt;Because I’ve decorated the controller with &lt;code class=&quot;highlighter-rouge&quot;&gt;[Authorize]&lt;/code&gt;, the controller method avoids the manual authorization logic.&lt;/li&gt;
  &lt;li&gt;Because I’m using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt;, the controller method avoids the extra &lt;code class=&quot;highlighter-rouge&quot;&gt;[HandleExceptions]&lt;/code&gt; attribute.&lt;/li&gt;
  &lt;li&gt;Not illustrated in this example, but the controller method accepts request bodies as entities, avoiding having to manually deserialize the request body from the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpRequest&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From a purely code aesthetics perspective, I just prefer controller methods over HTTP-triggered functions.&lt;/p&gt;

&lt;h3 id=&quot;api-usage-pattern&quot;&gt;API USAGE PATTERN&lt;/h3&gt;

&lt;p&gt;I expect the usage pattern of my API to be fairly uniform across the available endpoints and the traffic to ebb and flow predictably with the amount of users using the mobile app. I don’t expect large spikes in traffic to specific endpoints where I would need to be able to scale individual endpoints; if there are large spikes due to a sudden increase in the number of users, I’ll want to scale the whole web API service.&lt;/p&gt;

&lt;p&gt;While HTTP-triggered Azure Functions may be the right choice for other use cases, the anticipated usage pattern of the Stock Alerts API aligns much more closely with a Web API service.&lt;/p&gt;

&lt;p&gt;I’m still using Azure Functions for pulling stock quotes, evaluating alert definitions, and sending out notifications. Azure Functions are well-suited for these use cases, for the reasons I described &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/01/stock-alerts-infrastructure/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;With this change behind me, I’m ready to continue moving forward working on the mobile app. My mornings the rest of this week will be focused on building the Create Alert Definition screen.&lt;/p&gt;

&lt;p&gt;Here’s the repository for the project if you’d like to follow along: https://github.com/jonblankenship/stock-alerts.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;-Jon&lt;/p&gt;</content><author><name></name></author><category term="asp-net-core" /><category term="authentication" /><category term="authorization" /><category term="azure-functions" /><category term="controllers" /><category term="error-handling" /><category term="http-triggered-function" /><category term="middleware" /><category term="side-project" /><category term="stock-alerts" /><category term="web-api" /><summary type="html">This past weekend was a long one due to the Fourth of July, and despite a weekend filled with cookouts, swimming, fireworks, an anniversary date night, and a trip to St. Louis, I was able to knock off an important task on my side project‘s TODO List.</summary></entry><entry><title type="html">Stock Alerts Update</title><link href="https://blog.jonblankenship.com//2019/07/03/stock-alerts-update-2019-07-03/" rel="alternate" type="text/html" title="Stock Alerts Update" /><published>2019-07-03T02:00:00-05:00</published><updated>2019-07-03T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/07/03/stock-alerts-update-2019-07-03</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/07/03/stock-alerts-update-2019-07-03/">&lt;p&gt;I’d been meaning to get this update out over the weekend, but a stomach bug visited our house and threw off my schedule. I’d like to get these updates out about once a week going forward, but since this is a side project and I’m working on it for fun in my off hours, I’m not going to sweat it too much.&lt;/p&gt;

&lt;p&gt;Also, as I mentioned in my &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/25/working-on-a-new-side-project-in-public/&quot;&gt;first post&lt;/a&gt;, these updates will be pretty informal and unpolished. I just want to talk in detail about some of the things I did in the past week on the project, and what I plan to do in the coming week.&lt;/p&gt;

&lt;h2 id=&quot;last-week&quot;&gt;Last Week&lt;/h2&gt;

&lt;h3 id=&quot;writing&quot;&gt;WRITING&lt;/h3&gt;

&lt;p&gt;With my announcement last weekend that I’ll be building Stock Alerts in public, I was compelled to write a few extra posts to lay some of the groundwork for project. I wrote the &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/25/working-on-a-new-side-project-in-public/&quot;&gt;introductory post&lt;/a&gt;, spoke about &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/28/stock-alerts-features/&quot;&gt;the features&lt;/a&gt;, and laid out &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/01/stock-alerts-infrastructure/&quot;&gt;the infrastructure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Naturally, this took some of my time away from development, but I think it was time well spent.&lt;/p&gt;

&lt;p&gt;I have other posts that I want to write in the future to cover some of the work I’ve already done (particularly in the API), and I’ll try to work those in in the coming weeks without sacrificing too much dev time.&lt;/p&gt;

&lt;h3 id=&quot;create-alert-definition--stock-search&quot;&gt;CREATE ALERT DEFINITION – STOCK SEARCH&lt;/h3&gt;

&lt;p&gt;I’ve been working on the Create Alert Definition screen in the Stock Alerts mobile app. This is where the user defines an alert, including selecting the stock and defining the alert criteria. Specifically, I was focused on the stock selection functionality last week (we’ll talk more about building the alert criteria in a couple weeks).&lt;/p&gt;

&lt;p&gt;Here’s a wireframe for these screens:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-Create-Alert-Definition-screen-wireframes-768x360.png&quot; alt=&quot;Stock Alerts Create Alert Definition screen wireframes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I want the stock search feature to function like a typeahead search, allowing the user to type as much or as little of the stock symbol or company name as desired, and when they pause, the system retrieves the search results.&lt;/p&gt;

&lt;p&gt;I already had an API endpoint for finding stocks based on a search string; I just needed to add &lt;code class=&quot;highlighter-rouge&quot;&gt;CancellationToken&lt;/code&gt; support, which was as simple as adding it to the Azure function signature and plumbing it down to the data access layer:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FindStocks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleExceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindStocksAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpTrigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthorizationLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Anonymous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;stocks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Implementing search on the mobile app side took a bit more work…&lt;/p&gt;

&lt;p&gt;Thinking about this from an implementation perspective, my &lt;code class=&quot;highlighter-rouge&quot;&gt;StockSearchPageViewModel&lt;/code&gt; needs to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchString&lt;/code&gt; property that receives the input from the textbox, waits a second, and if there’s no additional input, execute the web request to get the search results from the API, which will populate a collection of results on the view model to which the view is bound. If additional input is received from the user while the web request is executing, we need to cancel it and issue a new request.&lt;/p&gt;

&lt;p&gt;I can’t (shouldn’t) implement all of this in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchString&lt;/code&gt; property setter, because you can’t (and shouldn’t want to) make a property setter async. Property setters should be fast and non-blocking. And yet I want to be able to simply bind the &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt; property of my search box to a property on my view model.&lt;/p&gt;

&lt;p&gt;I ended up using &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&lt;/code&gt; from &lt;a href=&quot;https://blog.stephencleary.com/&quot;&gt;Stephen Cleary’s&lt;/a&gt; &lt;a href=&quot;https://www.nuget.org/packages/Nito.Mvvm.Async/&quot;&gt;Nito.Mvvm.Async&lt;/a&gt; library, which contains helpers for working with async methods in MVVM. &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&lt;/code&gt; is “essentially an &lt;code class=&quot;highlighter-rouge&quot;&gt;INotifyPropertyChanged&lt;/code&gt; wrapper for &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;,” as Stephen writes in &lt;a href=&quot;https://stackoverflow.com/a/20953623/9688659&quot;&gt;this SO answer&lt;/a&gt;, which helped me quite a bit (the answer refers to &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTaskCompletion&lt;/code&gt;, which was replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;So here’s my &lt;code class=&quot;highlighter-rouge&quot;&gt;StockSearchPageViewModel&lt;/code&gt; implementation:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StockSearchPageViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModelBase&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IStocksService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stocksService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationTokenSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StockSearchPageViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IStocksService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stocksService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;INavigationService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_stocksService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stocksService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stocksService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_searchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SearchString&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_searchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_searchString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSearchCancellationTokenSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSearchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Stocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SearchStocksAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;RaisePropertyChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stocks&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_stocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;RaisePropertyChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectedStock&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_stock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationParams&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NavigationParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;navigationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NavigationParameterKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SelectedStock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NavigationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GoBackAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SearchStocksAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationTokenSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsCancellationRequested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stocksService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindStocksAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The view model creates and manages the cancellation token source, and cancels it when necessary, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchString&lt;/code&gt; property setter. This is also where we create the &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&lt;/code&gt;, passing it a delegate for the &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchStocksAsync(..)&lt;/code&gt; method, which delays one second and calls the search API. The results of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchStocksAsync(..)&lt;/code&gt; method call are exposed as &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&amp;lt;List&amp;lt;Stock&amp;gt;&amp;gt;&lt;/code&gt; by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Stocks&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;In my &lt;code class=&quot;highlighter-rouge&quot;&gt;StockSearchPage&lt;/code&gt; view, I can simply bind to the properties, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xaml&quot;&gt;&amp;lt;SearchBar Grid.Row=&quot;1&quot; Placeholder=&quot;Start typing ticker or company name&quot; Text=&quot;{Binding SearchString, Mode=TwoWay}&quot;&amp;gt;&amp;lt;/SearchBar&amp;gt;
&amp;lt;ListView Grid.Row=&quot;2&quot; ItemsSource=&quot;{Binding Stocks.Result}&quot; SelectedItem=&quot;{Binding SelectedStock}&quot;&amp;gt;
    &amp;lt;!--snip--&amp;gt;
&amp;lt;/ListView&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and with that, the typeahead stock search seems to be working pretty well.&lt;/p&gt;

&lt;h5 id=&quot;httpclientfactory&quot;&gt;HTTPCLIENTFACTORY&lt;/h5&gt;

&lt;p&gt;ASP.Net Core 2.1 introduced &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt;, which solves some of the problems developers run into when they create too many &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;s in their projects. Steven Gordon has a nice write-up on &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; and the problems it attempts to solve &lt;a href=&quot;https://www.stevejgordon.co.uk/introduction-to-httpclientfactory-aspnetcore&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The syntax to configure clients using &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; is straightforward. In your ASP.NET Core Startup.cs:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Apis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.someapi.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultRequestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, since Xamarin.Forms projects target .NET Standard, we can’t use any of the .NET Core goodies like &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt;. I wanted a similar pattern for configuring and creating my &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;s in the mobile app, so I took some inspiration from &lt;a href=&quot;https://github.com/aspnet/Extensions/tree/master/src/HttpClientFactory/Http/src&quot;&gt;here&lt;/a&gt; and created my own poor man’s &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s my &lt;code class=&quot;highlighter-rouge&quot;&gt;IHttpClientFactory&lt;/code&gt; interface:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IHttpClientFactory&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s my fairly naïve, yet adequate implementation:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpClientFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHttpClientFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDisposable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; must be provided.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;A client with the name &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; has already been added.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;A client by the name of &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; has not yet been registered.  Call &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; first.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the registration of the factory with a single client in my App.xaml.cs:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;IHttpClientFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClientFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClientFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;httpClientFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MiscConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StockAlertsApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MiscConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StockAlertsApiBaseUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultRequestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MediaTypeWithQualityHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;containerRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RegisterInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpClientFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives me a nice way to create and manage my &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;s in my Xamarin.Forms project, and it will be easy to drop in the real &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; if it ever becomes available for Xamarin.Forms projects.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Last week’s activities also included implementing a web service client base class for handling common tasks when communicating with the API, storing access and refresh tokens on the client, and working out my unauthorized/refresh token flow, but those are topics for another post. This one’s long enough.&lt;/p&gt;

&lt;h2 id=&quot;this-week&quot;&gt;This Week&lt;/h2&gt;

&lt;p&gt;This week’s already about half over, and we’ve got the 4th of July coming up. I plan to continue working on the Create Alert Definition screen, and perhaps by the next time I write I’ll have the functionality for building the alert criteria and saving the alert definition working – we’ll see.&lt;/p&gt;

&lt;p&gt;Here’s the repository for the project if you’d like to follow along: https://github.com/jonblankenship/stock-alerts.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and Happy Fourth of July!&lt;/p&gt;

&lt;p&gt;-Jon&lt;/p&gt;</content><author><name></name></author><category term="asp-net-core" /><category term="async-await" /><category term="cancellation-token" /><category term="httpclient" /><category term="httpclientfactory" /><category term="inotifypropertychanged" /><category term="mvvm" /><category term="notifytask" /><category term="stock-alerts-update" /><category term="xamarin.forms" /><summary type="html">I’d been meaning to get this update out over the weekend, but a stomach bug visited our house and threw off my schedule. I’d like to get these updates out about once a week going forward, but since this is a side project and I’m working on it for fun in my off hours, I’m not going to sweat it too much.</summary></entry><entry><title type="html">Stock Alerts Infrastructure</title><link href="https://blog.jonblankenship.com//2019/07/01/stock-alerts-infrastructure/" rel="alternate" type="text/html" title="Stock Alerts Infrastructure" /><published>2019-07-01T02:00:00-05:00</published><updated>2019-07-01T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/07/01/stock-alerts-infrastructure</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/07/01/stock-alerts-infrastructure/">&lt;p&gt;We’ve &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/28/stock-alerts-features/&quot;&gt;talked about the features&lt;/a&gt; that we’ll be implementing in Stock Alerts. Today we’ll look at the infrastructure that will be needed to support those features.&lt;/p&gt;

&lt;p&gt;I’ve been working in &lt;a href=&quot;https://azure.microsoft.com/en-us/&quot;&gt;Azure&lt;/a&gt; for several years now, both in my work life and on side projects. Being a primarily .NET developer, it makes sense that Azure is my preferred cloud. One of these days I will probably check out AWS, but for this project we’ll be hosting our backend services in Azure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Microsoft-Azure-300x66.png&quot; alt=&quot;Microsoft Azure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;more-than-just-crud&quot;&gt;More Than Just CRUD&lt;/h2&gt;

&lt;p&gt;When deciding what to build for this project, I wanted to do something that was a bit more than just a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; app that consists of an app talking to a web service talking to a database. Stock Alerts will need to continuously monitor the current prices of all stocks for which there are active alert definitions and evaluate whether the alert should be triggered, so we’ll need a process that runs on a regular basis to perform that work. Further, when the process detects that an alert should be triggered, it needs to send out notifications on the user’s preferred channel(s).&lt;/p&gt;

&lt;p&gt;For this processing, we’ll use a combination of &lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions/&quot;&gt;Azure Functions&lt;/a&gt; and &lt;a href=&quot;https://azure.microsoft.com/en-us/services/service-bus/&quot;&gt;Service Bus&lt;/a&gt; queues.&lt;/p&gt;

&lt;p&gt;Here’s a sequence diagram depicting the retrieving of quotes, evaluation of alert definitions, and sending of notifications:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-Notification-Sequence-Diagram-768x327.png&quot; alt=&quot;Stock Alerts Notification Sequence Diagram&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;alert-definition-evaluation&quot;&gt;ALERT DEFINITION EVALUATION&lt;/h3&gt;

&lt;p&gt;The evaluation of the active alert definitions will have a predictable load. The system will query the stock data provider on a defined time interval for the distinct set of stocks for which there are active alerts and iterate through the alert definitions and evaluate them against the latest data received from the data provider for that stock.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-timer&quot;&gt;timer-triggered Azure Function&lt;/a&gt;, which is essentially a CRON job running in Azure, will work nicely for periodically pulling new stock data. Initially, there will be a single function instance to pull the data, but this work can be partitioned out to multiple function instances if/when the need arises. It will then enqueue a message on a service bus queue (alertprocessingqueue) for each active alert indicating that there’s new data and the alert needs to be evaluated.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-service-bus&quot;&gt;service bus queue-triggered function&lt;/a&gt; (EvaluateAlert) will receive the service bus message and perform the evaluation for a single alert definition.&lt;/p&gt;

&lt;h3 id=&quot;sending-notifications&quot;&gt;SENDING NOTIFICATIONS&lt;/h3&gt;

&lt;p&gt;The actual notification of users, on the other hand, will likely be characterized by periods of low activity with occasional spikes of high activity. Imagine a very popular stock like AAPL receiving an earnings surprise and opening 5% higher – several alert definitions could be triggered at once and notifications will need to be sent immediately.&lt;/p&gt;

&lt;p&gt;Azure Functions will help us with this use case as well – we’ll enqueue notification messages on service bus queues (pushnotificationqueue, for example) when alerts are triggered and service bus queue-triggered functions (SendPushNotification, for example) will respond and send out the notifications. We’ll have a queue for each delivery channel (push, e-mail, SMS), and a function for each as well.&lt;/p&gt;

&lt;p&gt;When AAPL spikes and 500 alerts are triggered, 500 messages will be enqueued on service bus queues (assuming each user only has one delivery channel) and 500 functions will be invoked to deliver those notifications.&lt;/p&gt;

&lt;h2 id=&quot;the-infrastructure&quot;&gt;The Infrastructure&lt;/h2&gt;

&lt;p&gt;So what Azure resources will be required to support the Stock Alerts features? Here’s a diagram of what we’ll need for the MVP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-MVP-Infrastructure-Resources.png&quot; alt=&quot;Stock Alerts MVP Infrastructure Resources&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve got an &lt;a href=&quot;https://azure.microsoft.com/en-us/services/sql-database/&quot;&gt;Azure SQL&lt;/a&gt; database to store our users and their preferences, alert definitions and criteria, and stocks and their latest data.&lt;/p&gt;

&lt;p&gt;We’ve already talked about the service bus queues, which are used for communicating between the Azure Functions, and we’ve already talked about the Azure Functions as well.&lt;/p&gt;

&lt;p&gt;The Stock Alerts API will be an ASP.NET Core Web API service running in Azure, and it will expose endpoints to handle the user and alert definition maintenance as well as authentication.&lt;/p&gt;

&lt;p&gt;The Stock Alerts web app, though depicted on the diagram, will actually be implemented post-MVP.&lt;/p&gt;

&lt;h3 id=&quot;current-state&quot;&gt;CURRENT STATE&lt;/h3&gt;

&lt;p&gt;The above shows the infrastructure as I plan to have it at launch. Below is the current infrastructure I have deployed in Azure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-Current-Infrastructure-Resources.png&quot; alt=&quot;Stock Alerts Current Infrastructure Resources&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of the API endpoints are currently implemented as &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook&quot;&gt;HTTP-triggered Azure functions&lt;/a&gt;. I did this because I already had the StockAlerts.Functions project, and I didn’t think there’d be that many HTTP endpoints. As I started implementing the authentication endpoints and I ran into some of the limitations of Azure Functions HTTP endpoints (i.e., you can’t inject logic into the pipeline as you can into the ASP.NET Core middleware for a full-fledged Web API), I increasingly felt like the API endpoints deserved their own project and app service. It’s on my &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/TODO.md&quot;&gt;TODO list&lt;/a&gt; to move these into their own project and service.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;I think the most interesting part of the Stock Alerts infrastructure is the use of Azure Functions and Service Bus queues to evaluate alert definitions and send notifications. Azure Functions make sense for these processes because they can be triggered by schedule or service bus queue message (among other methods), and they are easily scaled. Service bus queues are appropriate for the communication between functions because they are highly available, reliable, and fast.&lt;/p&gt;

&lt;p&gt;Though one of the key value props of serverless computing is automatic scaling, I don’t have practical experience with scaling Azure Functions during periods of high load. I’ll log and monitor timings from the various functions to ensure that notifications are being delivered in a timely fashion from when they are triggered, which is crucial for Stock Alerts’ primary function.&lt;/p&gt;

&lt;p&gt;That’s all for now. Thanks for reading.&lt;/p&gt;

&lt;p&gt;-Jon&lt;/p&gt;</content><author><name></name></author><category term="asp-net-core" /><category term="azure-functions" /><category term="azure-service-bus" /><category term="mvp" /><category term="azure-sql" /><category term="http-triggered-function" /><category term="infrastructure" /><category term="serverless" /><category term="service-bus-queue-triggered-function" /><category term="stock-alerts" /><category term="timer-triggered-function" /><summary type="html">We’ve talked about the features that we’ll be implementing in Stock Alerts. Today we’ll look at the infrastructure that will be needed to support those features.</summary></entry><entry><title type="html">Stock Alerts Features</title><link href="https://blog.jonblankenship.com//2019/06/28/stock-alerts-features/" rel="alternate" type="text/html" title="Stock Alerts Features" /><published>2019-06-28T02:00:00-05:00</published><updated>2019-06-28T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/06/28/stock-alerts-features</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/06/28/stock-alerts-features/">&lt;p&gt;In my &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/25/working-on-a-new-side-project-in-public/&quot;&gt;previous post&lt;/a&gt; I revealed my new side project, Stock Alerts, and my intention to build a .NET Core product on the Azure stack, posting regular updates about my work as I go. Before I get down into the weeds in future posts, I thought it might be good to first talk at a higher level about the MVP features I’ll be implementing and the infrastructure that will be needed.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;p&gt;Stocks Alerts will consist of a mobile app with a small number of key features. Of course there will be backend services to support the mobile app functionality, but we’ll talk about the features from the user’s perspective as he/she interacts with the app.&lt;/p&gt;

&lt;p&gt;There will also be a web app eventually, but for now we’ll just focus on the mobile app.&lt;/p&gt;

&lt;h3 id=&quot;alert-definition-management&quot;&gt;ALERT DEFINITION MANAGEMENT&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;push_notifications1600-150x150.png&quot; alt=&quot;Push notification&quot; class=&quot;float-right&quot; /&gt;Stock Alerts users will be able to view, create, edit, and delete alert definitions that define the criteria for a stock alert. In the course of creating an alert definition, the user will search for and select a stock, name the alert, and define the criteria that will trigger the alert.&lt;/p&gt;

&lt;p&gt;Initially, the set of stocks available to create alert definitions will be limited, due to daily API call limits set by my data provider (which I’ll talk in a future post). I’ve considered either supporting only stocks in the S&amp;amp;P 500 at first or allowing the initial users to essentially define the initial universe of stocks by the alert definitions that they create. Still thinking on this one…&lt;/p&gt;

&lt;p&gt;For the alert criteria, the API will support allowing the user to choose from multiple rule types (like various price alerts, technical alerts, and fundamental alerts), as well as combining multiple rules into a boolean logic tree, but for MVP the mobile app will only expose the ability to enter &lt;code class=&quot;highlighter-rouge&quot;&gt;1..n&lt;/code&gt; price alerts combined by an &lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;alert-notifications&quot;&gt;ALERT NOTIFICATIONS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions&quot;&gt;&lt;img src=&quot;AzureFunctions-150x150.png&quot; alt=&quot;Azure Functions&quot; class=&quot;float-right&quot; /&gt;&lt;/a&gt;The Stock Alerts backend will evaluate all active alert definitions as it receives new stock data and notify users of triggered alerts via one or more of three methods: push notification, e-mail, and/or SMS message.&lt;/p&gt;

&lt;p&gt;The processing of active alert definitions and the sending of notifications via the three channels will be handled by Azure Functions in conjunction with Azure Service Bus queues. Azure Functions are well-suited for these types of tasks – I pay for the compute that I use and they can scale out under load (for example, when AAPL makes a large move and triggers a large number of alerts).&lt;/p&gt;

&lt;h3 id=&quot;user-registration--login&quot;&gt;USER REGISTRATION &amp;amp; LOGIN&lt;/h3&gt;

&lt;p&gt;The Stock Alerts mobile app will allow new users to register with the app and existing users to login. To register, a user just needs to provide their e-mail address, a unique username, and their password. After login, web requests will be authenticated via token-based authentication&lt;/p&gt;

&lt;h3 id=&quot;user-preferences-management&quot;&gt;USER PREFERENCES MANAGEMENT&lt;/h3&gt;

&lt;p&gt;Users will be able to set their notification preferences in the Stock Alerts app, including the channels that they will be notified on (push notification, e-mail, or SMS), as well as their e-mail address and SMS phone number, if applicable.&lt;/p&gt;

&lt;h3 id=&quot;paymentsubscription-management&quot;&gt;PAYMENT/SUBSCRIPTION MANAGEMENT&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://stripe.com/&quot;&gt;&lt;img src=&quot;stripe-pay-card-logo_318-55295-150x150.jpg&quot; alt=&quot;Stripe logo&quot; class=&quot;float-right&quot; /&gt;&lt;/a&gt;Though users will be able to register and set up a limited number of alert definitions for free, I’ll charge users who have more than a few active alert definitions. Stripe is the standard for managing subscriptions and taking online payments, and their API is well-designed. We’ll integrate with Stripe to manage user subscriptions and payments for premium users.&lt;/p&gt;

&lt;h3 id=&quot;cross-platform&quot;&gt;CROSS-PLATFORM&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/xamarin-forms/&quot;&gt;&lt;img src=&quot;xamagon-150x150.png&quot; alt=&quot;Xamarin Forms&quot; class=&quot;float-right&quot; /&gt;&lt;/a&gt;The mobile app will target both Android and iOS (and eventually web), and we’ll use Xamarin.Forms to accomplish this. I’m an Android user, so Android will be the first platform I focus on. I can get idea validation and feedback by launching on a single platform, and if there is traction after launch and I want to expand to iOS, I’ll be well-positioned to do so having build the app with Xamarin.Forms.&lt;/p&gt;

&lt;p&gt;A web app will probably be post-MVP as well.&lt;/p&gt;

&lt;h2 id=&quot;is-that-all&quot;&gt;Is That All?&lt;/h2&gt;

&lt;p&gt;The feature set that I’m targeting for MVP is extremely limited by design. There’s enough here to provide value, prove out the idea, and demonstrate interactions throughout the full stack while being small enough to complete within a couple of months at 5-10 hours per week (though writing about it will slow me down some). There will also be plenty of opportunities for enhancements and additional features post-MVP, if I’m so inclined.&lt;/p&gt;

&lt;p&gt;When choosing a side project, it’s important to me that it be very small and limited in scope for a few reasons. First, I want something that I can build quickly while I’m motivated and energized about the new idea and lessen the risk of losing interest or becoming bored with it halfway through. I also want to launch as soon as possible to begin the feedback loop and start learning from my users: What do they like/not like? How do they use the product? Will they pay for it? Etc… Finally, by limiting the initial feature set, I focus on just the core features of the product and I don’t waste time building features that my users may not even care about.&lt;/p&gt;

&lt;p&gt;So now that we know what features we’ll be building, we’re ready to talk about the infrastructure needed to support those features!&lt;/p&gt;

&lt;p&gt;… but that’s a topic for my next post. Thanks for reading.&lt;/p&gt;

&lt;p&gt;-Jon&lt;/p&gt;</content><author><name></name></author><category term="asp-net-core" /><category term="azure-functions" /><category term="azure-service-bus" /><category term="mvp" /><category term="stock-alerts" /><category term="xamarin.forms" /><summary type="html">In my previous post I revealed my new side project, Stock Alerts, and my intention to build a .NET Core product on the Azure stack, posting regular updates about my work as I go. Before I get down into the weeds in future posts, I thought it might be good to first talk at a higher level about the MVP features I’ll be implementing and the infrastructure that will be needed.</summary></entry><entry><title type="html">Working on a New Side Project in Public</title><link href="https://blog.jonblankenship.com//2019/06/25/working-on-a-new-side-project-in-public/" rel="alternate" type="text/html" title="Working on a New Side Project in Public" /><published>2019-06-25T02:00:00-05:00</published><updated>2019-06-25T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/06/25/working-on-a-new-side-project-in-public</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/06/25/working-on-a-new-side-project-in-public/">&lt;p&gt;For the past month or so I’ve been working on a new side project. It’s a small project that will allow me to exercise existing skills, re-sharpen older skills that I’ve not used in awhile, and learn some new ones.&lt;/p&gt;

&lt;p&gt;I’d like to share it with you…&lt;/p&gt;

&lt;h2 id=&quot;working-in-public&quot;&gt;Working in Public&lt;/h2&gt;

&lt;p&gt;I’ve been working my side project every weekday morning for an hour or two before my workday starts and on the occasional weeknight or weekend. I toil away mostly in solitude, except when I solicit feedback or ask for advice from a colleague and buddy who’s working on his own project.&lt;/p&gt;

&lt;p&gt;I’ve recently been inspired by a few folks on various podcasts to start working in public. They speak of the benefits of sharing what you’re learning, developing, building with your audience as you’re working on it, an idea that strikes fear in the hearts of those who, like me, are inclined towards self-conscious perfectionism. It’s difficult to put your in-progress work out there for all to see, warts and all.&lt;/p&gt;

&lt;p&gt;There’s been an increasing trend towards working in public, particularly among indie makers and developers. I dipped my toe into those waters with my last project, &lt;a href=&quot;https://openshippers.com/&quot;&gt;Open Shippers&lt;/a&gt;, earlier this year*, and I plan to get back in the pool with this project.&lt;/p&gt;

&lt;p&gt;My plan is to post fairly regular (weekly?) updates about what I’m doing on the project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What did I do the prior week?&lt;/li&gt;
  &lt;li&gt;Is there a particular problem I solved, pattern I used, or trick I learned that is worth sharing?&lt;/li&gt;
  &lt;li&gt;What do I plan to work on in the coming week?&lt;/li&gt;
  &lt;li&gt;Any particular challenges worth mentioning?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things like that.&lt;/p&gt;

&lt;p&gt;These will be pretty rough, unpolished posts. Sometimes a particular topic I encounter will be worthy of becoming a more in-depth, polished post, and put these up from time to time.&lt;/p&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;

&lt;p&gt;So what are my goals with working on this new project, and doing so in public?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get into the habit of writing regularly.&lt;/li&gt;
  &lt;li&gt;Sharpen old skills and learn new ones.&lt;/li&gt;
  &lt;li&gt;Share what I’m working on and what I’ve learned. Hopefully it is helpful to someone.&lt;/li&gt;
  &lt;li&gt;Demonstrate the process of taking a product from concept to market.&lt;/li&gt;
  &lt;li&gt;Demonstrate well-architected, working product on the Azure / .NET Core stack.&lt;/li&gt;
  &lt;li&gt;Teach.&lt;/li&gt;
  &lt;li&gt;Learn.&lt;/li&gt;
  &lt;li&gt;Have fun.&lt;/li&gt;
  &lt;li&gt;Make some lunch money if anyone subscribes to the service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-the-project&quot;&gt;What’s the Project?&lt;/h2&gt;

&lt;h3 id=&quot;concept&quot;&gt;CONCEPT&lt;/h3&gt;

&lt;p&gt;The idea is not particularly novel or interesting, but it’s a good candidate for what I’m trying to achieve with this project.&lt;/p&gt;

&lt;p&gt;I’m building a stock alerts app (hereafter referred to as Stock Alerts until I think of a good name for it) that will allow the user to create an alert definition for a given stock based on a set of criteria that they define. When the alert is triggered, the user will be notified according to their preferences by push notification, SMS, and/or e-mail.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Aren’t there a ton of other stock alert apps out there?”&lt;/em&gt; Yes, there are. Some just let you set a simple price alert; others offer many more features. I plan to support complex alert criteria that include not only simple price alerts, but eventually also technical and fundamental alerts as well, which will differentiate the app from a portion of the market.&lt;/p&gt;

&lt;p&gt;I also want to challenge the idea that you have to have a completely novel idea to succeed in building an app that people will pay for. There’s room for multiple competitors in most markets, and oftentimes your app will be the right choice for a segment of the market that’s not currently being served well.&lt;/p&gt;

&lt;p&gt;To be clear, I have no illusions of replacing my income with this app, but it will be great fodder for achieving the goals I mentioned above, and it should be a fun little project.&lt;/p&gt;

&lt;h3 id=&quot;tech&quot;&gt;TECH&lt;/h3&gt;

&lt;p&gt;Here’s the some of the technology I’m using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hosted in &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/25/working-on-a-new-side-project-in-public/[https://azure.microsoft.com](https://azure.microsoft.com/)&quot;&gt;Azure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dotnet.microsoft.com/learn/web/what-is-aspnet-core&quot;&gt;ASP.NET Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions/&quot;&gt;Azure Functions&lt;/a&gt; for the data feed, alert definition evaluation, and notification processing&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-queues-topics-subscriptions&quot;&gt;Azure Service Bus Queues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/apis&quot;&gt;Web API&lt;/a&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/&quot;&gt;Azure App Service&lt;/a&gt; for the user and alert definition management&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/sql-database/&quot;&gt;Azure SQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/ef/core/&quot;&gt;Entity Framework Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/xamarin-forms/&quot;&gt;Xamarin Forms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PrismLibrary/Prism&quot;&gt;Prism&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/web-apps/client&quot;&gt;Blazor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/devops/&quot;&gt;Azure DevOps for CI/CD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;current-status&quot;&gt;CURRENT STATUS&lt;/h3&gt;

&lt;p&gt;The backend API is coded and running in Azure. I’ll share more detail about the API and how it’s built in future posts, including the overall architecture. I’ve been working on the mobile app for about a week now. I’m able to register/login through the mobile app and display my current alert definitions. Last week I put together some UI wireframes for the Create Alert Definition screens, and I’ll be working on implementing those screens this week.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;In the spirit of working in public, I’ve made the Stock Alerts repository public: https://github.com/jonblankenship/stock-alerts. As with most projects, there are areas of the codebase that need some work and refinement, but we’ll address those things together down the road.&lt;/p&gt;

&lt;p&gt;Thanks for reading! Until next time,&lt;/p&gt;

&lt;p&gt;-Jon&lt;/p&gt;

&lt;p&gt;(* After spending several months working on &lt;a href=&quot;https://openshippers.com/&quot;&gt;Open Shippers&lt;/a&gt;, I was burned out on it by the time I launched it in preview in February. I failed to differentiate it from other similar services out there, and I didn’t have any gas left in the tank to work on building an audience and making it successful. Someday I may do a post-mortem on the project. Open Shippers wasn’t a total failure though – I learned quite a bit while working on it, particularly about ASP.NET Core and Blazor, and I’ve reused several things I developed for Open Shippers in more recent projects. The site is still live, and I may revive efforts around it at some point, but I’m content to work on something else for the time being.)&lt;/p&gt;</content><author><name></name></author><category term="asp-net-core" /><category term="azure" /><category term="azure-devops" /><category term="azure-functions" /><category term="azure-service-bus" /><category term="azure-sql" /><category term="blazor" /><category term="ef-core" /><category term="prism" /><category term="side-project" /><category term="stock-alerts" /><category term="web-api" /><category term="work-in-public" /><category term="xamarin.forms" /><summary type="html">For the past month or so I’ve been working on a new side project. It’s a small project that will allow me to exercise existing skills, re-sharpen older skills that I’ve not used in awhile, and learn some new ones.</summary></entry><entry><title type="html">Open Shippers in Limited Preview</title><link href="https://blog.jonblankenship.com//2019/02/18/open-shippers-in-limited-preview/" rel="alternate" type="text/html" title="Open Shippers in Limited Preview" /><published>2019-02-18T01:00:00-06:00</published><updated>2019-02-18T01:00:00-06:00</updated><id>https://blog.jonblankenship.com//2019/02/18/open-shippers-in-limited-preview</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/02/18/open-shippers-in-limited-preview/">&lt;p&gt;For the past few months I’ve been working on Open Shippers (&lt;a href=&quot;https://openshippers.io/&quot;&gt;openshippers.io&lt;/a&gt;), a place for solo makers to build and ship projects in the open, publicly sharing their progress as they take their products from conception to launch and beyond. Makers will post daily standups, log decisions made, and provide general commentary about their projects in real-time while receiving support, feedback, and accountability from the community.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openshippers.io/&quot;&gt;&lt;img src=&quot;OS-Screenshot-768x397.png&quot; alt=&quot;Open Shippers home page.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yesterday I launched a limited preview of Open Shippers with a post on Indie Hackers:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.indiehackers.com/Jon99/post/b65fce3257&quot;&gt;&lt;img src=&quot;IH-Post-300x224.png&quot; alt=&quot;Open Shippers post on Indie Hackers.&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My goal for the next couple of weeks is to gain a handful of beta users on Open Shippers to provide feedback and validate (or invalidate) the idea.&lt;/p&gt;

&lt;h2 id=&quot;the-story-so-far&quot;&gt;The Story So Far&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://openshippers.io/&quot;&gt;Open Shippers&lt;/a&gt; story starts last summer…&lt;/p&gt;

&lt;p&gt;I’d started getting up early in the morning to devote the first couple of hours before the workday starts to personal pursuits and side project work at the suggestion of a buddy and colleague of mine who was doing the same. Think of the financial aphorism “Pay yourself first,” except applied to time in a day.&lt;/p&gt;

&lt;p&gt;Every weekday morning shortly after 5:00 AM I’d join him in a Slack channel. After the obligatory “good morning,” we’d each give our daily standup for our respective projects: what I did yesterday, what I plan to do today, and what’s getting in my way.&lt;/p&gt;

&lt;p&gt;I found that this daily routine of sharing my standup with a like-minded individual yielded several benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I felt accountable to someone else to ship. Every. Day.&lt;/li&gt;
  &lt;li&gt;I received valuable feedback on the features I was building.&lt;/li&gt;
  &lt;li&gt;I focused more on the things that mattered for MVP and less on those that didn’t.&lt;/li&gt;
  &lt;li&gt;I had a sounding board for things I was considering and decisions I was making.&lt;/li&gt;
  &lt;li&gt;My productivity increased.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometime around the beginning of November, it occurred to me that there might be value in a dedicated place for solo makers to post their daily standups and journal their project progress. There already exists a fantastic ecosystem of maker communities online, and, while I benefit from many of them, I hadn’t found a project-focused place to journal my day-to-day progress.&lt;/p&gt;

&lt;p&gt;So I got to work.&lt;/p&gt;

&lt;p&gt;From the point I first started working on &lt;a href=&quot;https://openshippers.io/&quot;&gt;Open Shippers&lt;/a&gt; I recorded my daily standups in a file (in addition to sharing them with my buddy on Slack). It was my intention to start using the application as soon as possible as I’m building it, eat my own dog food. Once the database was up I’d seed it with the prior standups from my file.&lt;/p&gt;

&lt;p&gt;November turned into December, and my colleague got busy with work trips and other life priorities that prevented him from joining me in the mornings for a few weeks. I continued my routine of posting my daily standups, and I found that the practice was valuable despite his absence.&lt;/p&gt;

&lt;p&gt;Fast-forward to today – I’ve finished the functionality needed to support more users than just myself. &lt;a href=&quot;https://openshippers.io/&quot;&gt;Open Shippers&lt;/a&gt; is in limited preview.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;There are many features on the &lt;a href=&quot;https://openshippers.io/&quot;&gt;Open Shippers&lt;/a&gt; roadmap, which I’ll publish soon. I’ll continue to develop new features in the open, with daily standups and updates.&lt;/p&gt;

&lt;p&gt;I’d welcome any feedback that my readers might have on the site, and, if you’re so inclined, I invite you to &lt;a href=&quot;https://openshippers.io/register&quot;&gt;join me&lt;/a&gt; on &lt;a href=&quot;https://openshippers.io/&quot;&gt;Open Shippers&lt;/a&gt; in the limited preview to use and hopefully get value from posting your daily standups and interacting with other shippers.&lt;/p&gt;

&lt;p&gt;Thanks for reading! What will you ship today?&lt;/p&gt;

&lt;p&gt;-Jon&lt;/p&gt;</content><author><name></name></author><category term="beta" /><category term="daily-standup" /><category term="makers" /><category term="mvp" /><category term="open-shippers" /><category term="open-startup" /><summary type="html">For the past few months I’ve been working on Open Shippers (openshippers.io), a place for solo makers to build and ship projects in the open, publicly sharing their progress as they take their products from conception to launch and beyond. Makers will post daily standups, log decisions made, and provide general commentary about their projects in real-time while receiving support, feedback, and accountability from the community.</summary></entry><entry><title type="html">Setting Environment for EF Core Data Migrations</title><link href="https://blog.jonblankenship.com//2019/02/01/setting-environment-for-ef-core-data-migrations/" rel="alternate" type="text/html" title="Setting Environment for EF Core Data Migrations" /><published>2019-02-01T01:00:00-06:00</published><updated>2019-02-01T01:00:00-06:00</updated><id>https://blog.jonblankenship.com//2019/02/01/setting-environment-for-ef-core-data-migrations</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/02/01/setting-environment-for-ef-core-data-migrations/">&lt;p&gt;Most of my side project work is in ASP.NET Core lately, and my main side project uses EF Core for data access with &lt;a href=&quot;https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/&quot;&gt;data migrations&lt;/a&gt;. My application is deployed in Azure using Azure SQL as the database. When developing and running locally, I hit a LocalDB instance on my machine.&lt;/p&gt;

&lt;p&gt;When I need to make changes to the data model, I make the code changes, run &lt;code class=&quot;highlighter-rouge&quot;&gt;Add-Migration Update###&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;Update-Database&lt;/code&gt; in package manager console, and my local database happily gets updated. But when I’m ready to make the changes to the SQL Azure database, how can I change the connection string that the EF database context is using?&lt;/p&gt;

&lt;h2 id=&quot;the-aspnetcore_environment-variable&quot;&gt;The ASPNETCORE_ENVIRONMENT Variable&lt;/h2&gt;

&lt;p&gt;First let’s talk about how an ASP.NET Core application knows where it’s running.&lt;/p&gt;

&lt;p&gt;ASP.NET Core &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-2.2&quot;&gt;uses an environment variable named ASPNETCORE_ENVIRONMENT&lt;/a&gt; to control how an application behaves in different environments. The framework supports three environment values out of the box: &lt;code class=&quot;highlighter-rouge&quot;&gt;Development&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Staging&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Production&lt;/code&gt;. When running locally, my app uses the environment variable set up for me by Visual Studio when I created the project on the Debug tab of my project’s properties:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;DebugEnvironmentVariable.png&quot; alt=&quot;The ASPNETCORE_ENVIRONMENT variable set on the Debug tab of Project Properties.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The ASPNETCORE_ENVIRONMENT variable in project properties.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the Application settings tab for my App Service in Azure, this variable is defined and set to &lt;code class=&quot;highlighter-rouge&quot;&gt;Production&lt;/code&gt; so the deployed instance of my application knows to use production settings and connection strings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;AzureEnvironmentVariable.png&quot; alt=&quot;The ASPNETCORE_ENVIRONMENT variable set on the Application settings tab on the App Service in Azure.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The value of this environment variable can be accessed from within the &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup&lt;/code&gt; class by using a constructor that takes an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;IHostingEnvironment&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostingEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can then use convenience members, like &lt;code class=&quot;highlighter-rouge&quot;&gt;environment.IsDevelopment&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;environment.IsProduction&lt;/code&gt; to switch based on the predefined environments, or access &lt;code class=&quot;highlighter-rouge&quot;&gt;environment.EnvironmentName&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;ASP.NET Core also supports the use of different appsettings.json files, depending on the value of the ASPNETCORE_ENVIRONMENT environment variable. For example, I have an appsettings.Development.json in my project with overrides for settings and connection strings specific to my development environment. When loading configuration options on startup, the framework knows to look for and use any settings defined in an appsettings.{EnvironmentName}.json file, where {EnvironmentName} matches the value of the ASPNETCORE_ENVIRONMENT environment variable.&lt;/p&gt;

&lt;h2 id=&quot;setting-aspnetcore_environment-for-data-migrations&quot;&gt;Setting ASPNETCORE_ENVIRONMENT for Data Migrations&lt;/h2&gt;

&lt;p&gt;All of this is prelude to the point of this post. I’ve never really used package manager console for much more than, well, managing Nuget packages and running the occasional data migration commands. But as it turns out, the Package Manager Console window is a &lt;a href=&quot;https://thoughts.async7.com/productivity-tip-roll-your-own-powershell-scripts-in-the-visual-studio-package-manager-console/&quot;&gt;PowerShell shell that can do much more&lt;/a&gt;. For now, I just need it to help me target the correct database when running my data migrations.&lt;/p&gt;

&lt;p&gt;I can see a list of my application’s &lt;code class=&quot;highlighter-rouge&quot;&gt;DbContext&lt;/code&gt; types and where they’re pointing by issuing &lt;a href=&quot;https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/powershell&quot;&gt;EF Core Tools&lt;/a&gt; command &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-DbContext&lt;/code&gt; in package manager console. Doing so yields the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PM&amp;gt; Get-DbContext
Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 2.2.1-servicing-10028 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None

providerName                            databaseName  dataSource             options
------------                            ------------  ----------             -------
Microsoft.EntityFrameworkCore.SqlServer mydatabase    (localdb)\MSSQLLocalDB None   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can then set the ASPNETCORE_ENVIRONMENT variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;Production&lt;/code&gt; for the context of the package manager window only by issuing the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PM&amp;gt; $Env:ASPNETCORE_ENVIRONMENT = &quot;Production&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All subsequent calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;Update-Database&lt;/code&gt; will be now run against the database configured for my &lt;code class=&quot;highlighter-rouge&quot;&gt;Production&lt;/code&gt; environment. I can double-check to make sure, though, by issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-DbContext&lt;/code&gt; again. This time it shows that I’m pointing to my deployed database:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PM&amp;gt; Get-DbContext

providerName                            databaseName dataSource                              options
------------                            ------------ ----------                              -------
Microsoft.EntityFrameworkCore.SqlServer mydatabase   tcp:acme.database.windows.net,1433      None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;–Jon&lt;/p&gt;</content><author><name></name></author><category term="asp.net-core" /><category term="asp.net-core-configuration" /><category term="ef-core" /><category term="ef-data-migrations" /><category term="package-manager-console" /><category term="powershell" /><summary type="html">Most of my side project work is in ASP.NET Core lately, and my main side project uses EF Core for data access with data migrations. My application is deployed in Azure using Azure SQL as the database. When developing and running locally, I hit a LocalDB instance on my machine.</summary></entry><entry><title type="html">Safely Rendering Markdown in Blazor</title><link href="https://blog.jonblankenship.com//2019/01/27/safely-rendering-markdown-in-blazor/" rel="alternate" type="text/html" title="Safely Rendering Markdown in Blazor" /><published>2019-01-27T01:00:00-06:00</published><updated>2019-01-27T01:00:00-06:00</updated><id>https://blog.jonblankenship.com//2019/01/27/safely-rendering-markdown-in-blazor</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/01/27/safely-rendering-markdown-in-blazor/">&lt;p&gt;This week I added the ability to post and properly display markdown content in my &lt;a href=&quot;https://blazor.net/&quot;&gt;Blazor&lt;/a&gt; (server-side Blazor, actually… Razor Components) project. Markdown is a lightweight, standardized way of formatting text without having to resort to HTML or depend on a &lt;a href=&quot;https://en.wikipedia.org/wiki/WYSIWYG&quot;&gt;WYSIWYG&lt;/a&gt; editor. There’s a nice markdown quick reference &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;leveraging-the-work-of-others&quot;&gt;Leveraging the Work of Others&lt;/h2&gt;

&lt;p&gt;My need was simple: display formatted markdown on one screen that was saved as plain text on another. Accomplishing this was almost as simple, thanks to the work of those who have gone before me. I used two libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lunet-io/markdig&quot;&gt;Markdig&lt;/a&gt; – “a fast, powerful, CommonMark compliant, extensible Markdown processor for .NET.”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mganss/HtmlSanitizer&quot;&gt;HtmlSanitizer&lt;/a&gt; – “a .NET library for cleaning HTML fragments and documents from constructs that can lead to XSS attacks.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also drew from &lt;a href=&quot;https://edcharbeneau.com/&quot;&gt;Ed Charbeneau’s&lt;/a&gt; fantastic work on &lt;a href=&quot;https://github.com/EdCharbeneau/BlazeDown&quot;&gt;BlazeDown&lt;/a&gt;, an experimental markdown editor he wrote using Blazor. He first &lt;a href=&quot;https://edcharbeneau.com/blazedown-with-blazor-02/&quot;&gt;built it&lt;/a&gt; back when Blazor was on release 0.2, and he had to do a little extra work to get it to work due to some deficiencies in Blazor at the time (namely, the inability to render raw HTML). The Blazor team added &lt;a href=&quot;https://blazor.net/api/Microsoft.AspNetCore.Blazor.MarkupString.html&quot;&gt;MarkupString&lt;/a&gt; for rendering raw HTML with release 0.5, which made the task of rendering markup much simpler. He &lt;a href=&quot;https://edcharbeneau.com/blazedown-with-blazor/&quot;&gt;revisited BlazeDown&lt;/a&gt; with release 0.5.1 of Blazor, and updated the project to use the new feature.&lt;/p&gt;

&lt;h2 id=&quot;this-example&quot;&gt;This Example&lt;/h2&gt;

&lt;p&gt;What I’ll show here is just enough code to meet the requirements that I had in my project – simply render a string of in-memory markdown as HTML on the screen and do it safely (more on that later).&lt;/p&gt;

&lt;p&gt;The code for this short sample can be found &lt;a href=&quot;https://github.com/jonblankenship/blazorplayground/tree/master/RenderMarkdown&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Markdown-768x311.png&quot; alt=&quot;markdown entered as plain text and rendered as HTML&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;markdownview-component&quot;&gt;MarkdownView Component&lt;/h2&gt;

&lt;p&gt;Part of the power of Blazor is the ability to componentize commonly used controls and logic for easy reuse.  I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;MarkdownView&lt;/code&gt; Blazor component that is responsible for safely rendering a string of markdown as HTML.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MarkdownView&lt;/code&gt; is just two lines:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@inherits MarkdownModel

@HtmlContent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;MarkdownModel&lt;/code&gt; is as follows:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarkdownModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlazorComponent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHtmlSanitizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HtmlSanitizer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HtmlContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConvertStringToMarkupString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MarkupString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HtmlContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MarkupString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConvertStringToMarkupString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Convert markdown string to HTML&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Markdig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Markdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MarkdownPipelineBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseAdvancedExtensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Sanitize HTML before rendering&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sanitizedHtml&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HtmlSanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sanitize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Return sanitized HTML as a MarkupString that Blazor can render&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MarkupString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanitizedHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MarkupString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a good simple example to demonstrate a few different concepts. First, I’ve specified a service to inject into the component on instantiation, &lt;code class=&quot;highlighter-rouge&quot;&gt;HtmlSanitizer&lt;/code&gt;. We’ll discuss this more in a bit, but for now just know that it is a dependency registered with the IoC container.&lt;/p&gt;

&lt;p&gt;Second, I’ve specified a parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;Content&lt;/code&gt;, that is bound to a to a property on the model of parent view. This is how I pass a string of markdown into this component.&lt;/p&gt;

&lt;p&gt;Third, I’ve exposed an &lt;code class=&quot;highlighter-rouge&quot;&gt;HtmlContent&lt;/code&gt; property of type &lt;code class=&quot;highlighter-rouge&quot;&gt;MarkupString&lt;/code&gt;. This is the property that will expose the string of markdown converted to a string of HTML that this component will display.&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;Content&lt;/code&gt; is set, I use a function &lt;code class=&quot;highlighter-rouge&quot;&gt;ConvertStringToMarkupString(..)&lt;/code&gt; to convert the string to HTML, sanitize the string of HTML, and return it as a &lt;code class=&quot;highlighter-rouge&quot;&gt;MarkupString&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Usage of the component consists of simply binding it to a string that we want to render:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;MarkdownView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@MarkdownContent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;be-safe--sanitize-your-html&quot;&gt;Be Safe – Sanitize Your HTML&lt;/h2&gt;

&lt;p&gt;It’s important to sanitize any user-supplied HTML that you will be rendering back as raw HTML to prevent malicious users from injecting scripts into you app and making it vulnerable to cross-site scripting (XSS) attacks. For this task, I use &lt;a href=&quot;https://github.com/mganss/HtmlSanitizer&quot;&gt;HtmlSanitizer&lt;/a&gt;, an actively-maintained, highly-configurable .NET library. I already showed above how it is injected and used in my &lt;code class=&quot;highlighter-rouge&quot;&gt;MarkdownView&lt;/code&gt; component. The only remaining piece is the registration of the &lt;code class=&quot;highlighter-rouge&quot;&gt;HtmlSanitizer&lt;/code&gt; with my IoC container in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigureServices&lt;/code&gt; method in my &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHtmlSanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HtmlSanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Configure sanitizer rules as needed here.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// For now, just use default rules + allow class attributes&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sanitizer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ganss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HtmlSanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllowedAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By making the sanitation of the HTML a part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;MarkdownView&lt;/code&gt; component’s logic, I ensure that I won’t forget to sanitize a piece of content as long as I always use the component to render my markdown. It’s also wise to sanitize markdown and HTML on ingress prior to writing it to storage.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;This was a pretty short example demonstrating how to add a feature that can have a big impact. The tools available to us in Blazor and a couple of existing libraries made this a pretty simple task, which is one of the reasons I’m so excited about Blazor: the ability to leverage existing .NET libraries directly in the browser directly translates to a number of significant benefits including faster delivery times, smaller codebases, lower total cost of ownership, etc…&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;–Jon&lt;/p&gt;</content><author><name></name></author><category term="asp.net-core" /><category term="blazor" /><category term="c#" /><category term="cross-site-scripting" /><category term="markdown" /><category term="razor-components" /><category term="sanitize-html" /><category term="xss" /><summary type="html">This week I added the ability to post and properly display markdown content in my Blazor (server-side Blazor, actually… Razor Components) project. Markdown is a lightweight, standardized way of formatting text without having to resort to HTML or depend on a WYSIWYG editor. There’s a nice markdown quick reference here.</summary></entry><entry><title type="html">Creating a Loading Overlay for a Composite Blazor View</title><link href="https://blog.jonblankenship.com//2019/01/06/creating-a-loading-overlay-for-a-composite-blazor-view/" rel="alternate" type="text/html" title="Creating a Loading Overlay for a Composite Blazor View" /><published>2019-01-06T01:00:00-06:00</published><updated>2019-01-06T01:00:00-06:00</updated><id>https://blog.jonblankenship.com//2019/01/06/creating-a-loading-overlay-for-a-composite-blazor-view</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/01/06/creating-a-loading-overlay-for-a-composite-blazor-view/">&lt;p&gt;One of my projects’ home screen is composed of multiple Blazor components that make a web service calls in their respective &lt;code class=&quot;highlighter-rouge&quot;&gt;OnInitAsync()&lt;/code&gt;s to retrieve their data.  When loading the page, all of the components render immediately in their unpopulated state; each one then updates and fills out as the various web service calls complete and their data loads.  I’m not a fan of this – I’d rather have a nice overlay with some sort of loading indicator hiding the components while they’re loading that disappears when the last component is ready for display.  This weekend I developed a simple pattern for accomplishing just that.&lt;/p&gt;

&lt;p&gt;The full source code for this example can be found &lt;a href=&quot;https://github.com/jonblankenship/blazorplayground/tree/master/PageLoadingOverlay&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-were-building&quot;&gt;What We’re Building&lt;/h2&gt;

&lt;p&gt;Below is an example of a Blazor page that contains three components, each one simulating a web service call on initialization that completes from one to three seconds after it is initialized.  We see them show up empty at first, then resize, and finally load their text, all at different times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;PageLoadWithoutOverlay.gif&quot; alt=&quot;Blazor page load without loading overlay.&quot; /&gt;&lt;em&gt;Blazor page load without loading overlay.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Instead, we want our end product to look like the following.  When the page loads we see a nice little loading indicator (I pulled a free one from &lt;a href=&quot;https://github.com/CamdenFoucht/LoadLab&quot;&gt;here&lt;/a&gt;) on an overlay that hides the components while they’re doing their business of intializing, resizing, and loading their data before they’re ready to be seen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;PageLoadWithOverlay.gif&quot; alt=&quot;Blazor page load with loading overlay.&quot; /&gt;&lt;em&gt;Blazor page load with loading overlay.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we know what we’re building, let’s see some code…&lt;/p&gt;

&lt;h2 id=&quot;blazor-components&quot;&gt;Blazor Components&lt;/h2&gt;

&lt;h3 id=&quot;index-view-and-model&quot;&gt;Index View and Model&lt;/h3&gt;

&lt;p&gt;We’ll start with our Blazor components.  Our IndexView.cshtml is the main page, and it looks like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@inherits PageLoadingOverlay.App.Features.Home.IndexModel
@page &quot;/&quot;
@layout Layout.MainLayout

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Loading overlay that displays until all individual components have loaded their data --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;LoadingOverlayView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;LoadStateManager=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@LoadStateManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/LoadingOverlayView&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-3 component-div component-1-div&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ComponentView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;LoadStateManager=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@LoadStateManager&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Number=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Delay=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/ComponentView&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-3 component-div component-2-div&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ComponentView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;LoadStateManager=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@LoadStateManager&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Number=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Delay=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/ComponentView&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-3 component-div component-3-div&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ComponentView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;LoadStateManager=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@LoadStateManager&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Number=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Delay=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/ComponentView&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we have four components in this view: three instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentView&lt;/code&gt; that load data on initialization, and an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadingOverlayView&lt;/code&gt; that hides the other components until they are all loaded. We’ll look at these components shortly.&lt;/p&gt;

&lt;p&gt;The corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;IndexModel&lt;/code&gt; for this view has a single property:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IndexModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlazorComponent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// The &amp;lt;see cref=&quot;LoadStateManager&quot;/&amp;gt; for this view&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Since this is the parent view that contains the loading overlay, we new&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// up an instance of the &amp;lt;see cref=&quot;LoadStateManager&quot;/&amp;gt; here, and pass it&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// to child components.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadStateManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadStateManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoadStateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We instantiate a new instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; here, which will manage the loading state of the child components and tell the loading overlay when all components are loaded and it can disappear.&lt;/p&gt;

&lt;h3 id=&quot;component-view-and-model&quot;&gt;Component View and Model&lt;/h3&gt;

&lt;p&gt;The three instances of the component that we’re loading have these properties:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComponentModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlazorComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILoadableComponent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadStateManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadStateManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Delay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;Component &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComponentLoadState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ComponentLoadState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; from the parent view is passed to the component, as well as a couple of other parameters (like &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Delay&lt;/code&gt;) that control the component’s behavior.&lt;/p&gt;

&lt;p&gt;The component implements interface &lt;code class=&quot;highlighter-rouge&quot;&gt;ILoadableComponent&lt;/code&gt; which defines a single property:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Defines a component whose &amp;lt;see cref=&quot;ComponentLoadState&quot;/&amp;gt; can be managed by a &amp;lt;see cref=&quot;LoadStateManager&quot;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ILoadableComponent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// The load state of a component&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ComponentLoadState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that when we implement &lt;code class=&quot;highlighter-rouge&quot;&gt;ILoadableComponent&lt;/code&gt; in our component, we go ahead and instantiate a new instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentLoadState&lt;/code&gt; to manage the loading state of this individual component.&lt;/p&gt;

&lt;p&gt;Back to our &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentModel&lt;/code&gt;, we want to register our component with the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; when its parameters are set, like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnParametersSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnParametersSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Register this component with the LoadStateManager&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LoadStateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This call makes the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; aware of this component and ensures that it will wait for this component to finish loading before alerts the parent view that all child components are done loading.&lt;/p&gt;

&lt;p&gt;Finally, we have our good friend, &lt;code class=&quot;highlighter-rouge&quot;&gt;OnInitAsync()&lt;/code&gt; which simulates a web service call with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Task.Delay(Delay)&lt;/code&gt;, sets our &lt;code class=&quot;highlighter-rouge&quot;&gt;Status&lt;/code&gt;, and finishes up with by telling the component’s &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadState&lt;/code&gt; that we’re done loading:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnInitAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Simulate a web service call to get data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandomText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Ok - we're done loading. Notify the LoadStateManager!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LoadState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnLoadingComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;loading-overlay-view-and-model&quot;&gt;Loading Overlay View and Model&lt;/h3&gt;

&lt;p&gt;The final view is the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadingOverlayView&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@inherits LoadingOverlayModel

@if (!LoadStateManager.IsLoadingComplete)
{
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loading-overlay&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loader-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dot-loader&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dot-loader&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dot-loader&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;   
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is essentially a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; that covers the main content area with a simple CSS loading animation in the middle that is displayed as long as &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager.IsLoadingComplete&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. (The CSS for this overlay is not my main focus for this post, but it can be found towards the bottom of the standard site.css that was created for my new project &lt;a href=&quot;https://github.com/jonblankenship/blazorplayground/blob/master/PageLoadingOverlay/PageLoadingOverlay.App/wwwroot/css/site.css&quot;&gt;here&lt;/a&gt; for those interested.) This is the same &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; that is instantiated in the &lt;code class=&quot;highlighter-rouge&quot;&gt;IndexModel&lt;/code&gt; and passed to the child components.&lt;/p&gt;

&lt;p&gt;Here’s the corresponding model:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Model class for &amp;lt;see cref=&quot;LoadingOverlayView&quot;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoadingOverlayModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlazorComponent&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// The &amp;lt;see cref=&quot;LoadStateManager&quot;/&amp;gt; for this &amp;lt;see cref=&quot;LoadingOverlayModel&quot;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadStateManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadStateManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnInitAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// When LoadStateManager indicates that all components are loaded, notify&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// this component of the state change&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LoadStateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadingComplete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StateHasChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this model, we subscribe to the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager.LoadingComplete&lt;/code&gt; event, which will fire when all of the components that the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; is monitoring have completed loading. When the event fires, we simply need to call &lt;code class=&quot;highlighter-rouge&quot;&gt;StateHasChanged()&lt;/code&gt; to alert the component to update itself. since it is bound directly to &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager.IsLoadingComplete&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;helper-classes&quot;&gt;Helper Classes&lt;/h2&gt;

&lt;h3 id=&quot;loadstatemanager&quot;&gt;LoadStateManager&lt;/h3&gt;

&lt;p&gt;As we’ve already mentioned, &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; manages the load state of a collection of components on a screen. Components register themselves with the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; keeps a collection of their &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentLoadState&lt;/code&gt;s and subscribes to each one’s &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadingComplete&lt;/code&gt; event, triggering the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadingComplete&lt;/code&gt; event when the last one completes:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Manages the &amp;lt;see cref=&quot;ComponentLoadState&quot;/&amp;gt;s for a particular view&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoadStateManager&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentLoadState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_componentLoadStates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComponentLoadState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Gets a value indicating whether all registered components are loaded&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsLoadingComplete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_componentLoadStates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsLoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Registers an &amp;lt;see cref=&quot;ILoadableComponent&quot;/&amp;gt; with this &amp;lt;see cref=&quot;LoadStateManager&quot;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&quot;component&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoadableComponent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_componentLoadStates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadingComplete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsLoadingComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnLoadingComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Notifies subscribers that all loading is complete for all registered components&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadingComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnLoadingComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LoadingComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EventArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;componentloadstate&quot;&gt;ComponentLoadState&lt;/h3&gt;

&lt;p&gt;Finally we have &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentLoadState&lt;/code&gt;, which represents the load state of an individual component. It exposes an &lt;code class=&quot;highlighter-rouge&quot;&gt;IsLoaded&lt;/code&gt; property, a &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadingComplete&lt;/code&gt; event, and an &lt;code class=&quot;highlighter-rouge&quot;&gt;OnLoadingComplete()&lt;/code&gt; method for storing and communicating the component’s load state:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Represents the load state of an individual component&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComponentLoadState&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Gets a value indicating whether this component is loaded&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsLoaded&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Notifies the &amp;lt;see cref=&quot;LoadStateManager&quot;/&amp;gt; that this component has completed loading&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadingComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Invoked by the corresponding component to indicate that it has completed loading&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnLoadingComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IsLoaded&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LoadingComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EventArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting It All Together&lt;/h2&gt;

&lt;p&gt;Once you have your helper classes and overlay view and spinner created, it’s fairly trivial to add this functionality to a Blazor page. The page view just needs to instantiate the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; and pass it to its children, and the child components need to define properties for the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentLoadState&lt;/code&gt;, register with the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadStateManager&lt;/code&gt;, and tell their &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentLoadState&lt;/code&gt; when they’re done loading.&lt;/p&gt;

&lt;p&gt;I hope you’ve found this post helpful. You can find the full source code for this sample &lt;a href=&quot;https://github.com/jonblankenship/blazorplayground/tree/master/PageLoadingOverlay&quot;&gt;here&lt;/a&gt;. Thanks for reading!&lt;/p&gt;

&lt;p&gt;–Jon&lt;/p&gt;</content><author><name></name></author><category term="asp.net-core" /><category term="blazor" /><category term="blazor-components" /><category term="server-side-blazor" /><summary type="html">One of my projects’ home screen is composed of multiple Blazor components that make a web service calls in their respective OnInitAsync()s to retrieve their data. When loading the page, all of the components render immediately in their unpopulated state; each one then updates and fills out as the various web service calls complete and their data loads. I’m not a fan of this – I’d rather have a nice overlay with some sort of loading indicator hiding the components while they’re loading that disappears when the last component is ready for display. This weekend I developed a simple pattern for accomplishing just that.</summary></entry></feed>