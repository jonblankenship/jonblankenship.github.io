<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://blog.jonblankenship.com//feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.jonblankenship.com//" rel="alternate" type="text/html" /><updated>2020-05-03T19:18:14-05:00</updated><id>https://blog.jonblankenship.com//feed.xml</id><title type="html">Jon Blankenship</title><subtitle>Developer.</subtitle><author><name>Jon_Blankenship</name></author><entry><title type="html">Custom Date Deserialization in ASP.NET Core Web API</title><link href="https://blog.jonblankenship.com//2020/05/03/custom-date-deserialization-in-aspnet-core-web-api/" rel="alternate" type="text/html" title="Custom Date Deserialization in ASP.NET Core Web API" /><published>2020-05-03T16:30:00-05:00</published><updated>2020-05-03T16:30:00-05:00</updated><id>https://blog.jonblankenship.com//2020/05/03/custom-date-deserialization-in-aspnet-core-web-api</id><content type="html" xml:base="https://blog.jonblankenship.com//2020/05/03/custom-date-deserialization-in-aspnet-core-web-api/">&lt;p&gt;This weekend I came across some oddly formatted datetimes while playing around with Twitter webhooks.  When it came time to test my API endpoint to receive the Twitter event, I received a 400 response with a message indicating that one of the date fields the JSON payload could not be deserialized into a DateTimeOffset.  In this post I’ll demonstrate how to write a custom converter to solve this and similar JSON deserialization problems in an ASP.NET Core Web API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;clock.jpg&quot; alt=&quot;A clock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/@laurachouette?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Laura Chouette&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/clock-nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Sadly, there’s not a universally accepted format for sending dates in JSON.  Dates in JSON are just strings after all, and although the &lt;a href=&quot;[https://en.wikipedia.org/wiki/ISO_8601](https://en.wikipedia.org/wiki/ISO_8601)&quot;&gt;ISO 8601&lt;/a&gt; format is the most commonly used and de facto standard, it’s far from universal.&lt;/p&gt;

&lt;p&gt;An ISO 8601 datetime looks like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;2018-10-10T20:19:24-00:00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Twitter formats their datetimes like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;Wed Oct 10 20:19:24 +0000 2018&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I don’t know if this is a format that’s used anywhere outside of Twitter or not, but I do know that the .NET JSON deserializer doesn’t know what to do with it.&lt;/p&gt;

&lt;p&gt;When a payload with a datetime like that is &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;ed to my ASP.NET Core Web API endpoint, my API complains:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://tools.ietf.org/html/rfc7231#section-6.5.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;One or more validation errors occurred.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;traceId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;|1fb1cbcd-465ead216a3ec717.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$.tweet_create_events[0].created_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The JSON value could not be converted to System.DateTimeOffset. Path: $.tweet_create_events[0].created_at | LineNumber: 5 | BytePositionInLine: 49.&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;I need to configure my API to deserialize datetimes in the Twitter format into a .NET &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTimeOffset&lt;/code&gt;.  To do this, I’ll create a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;JsonConverter&lt;/code&gt; and add it to the collection of JSON converters my service wires up at start-up.&lt;/p&gt;

&lt;p&gt;Note that I’m using the &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Text.Json&lt;/code&gt; serializer that was introduced with .NET Core 3.0, not the &lt;code class=&quot;highlighter-rouge&quot;&gt;Newtonsoft.Json&lt;/code&gt; serializer.&lt;/p&gt;

&lt;p&gt;First let’s create the custom converter.&lt;/p&gt;

&lt;h4 id=&quot;twitterdatetimeoffsetconverter&quot;&gt;TwitterDateTimeOffsetConverter&lt;/h4&gt;

&lt;p&gt;My custom converter derives from &lt;code class=&quot;highlighter-rouge&quot;&gt;JsonConverter&amp;lt;DateTimeOffset&amp;gt;&lt;/code&gt;.  The generic type parameter specifies the data type that we’ll be deserializing to/serializing from on the .NET side.&lt;/p&gt;

&lt;p&gt;The converter implements two methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;Read(..)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Write(..)&lt;/code&gt;,  which deserialize from and serialize to our custom datetime format specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;TwitterDateFormat&lt;/code&gt; constant.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TwitterDateTimeOffsetConverter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonConverter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TwitterDateFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ddd MMM dd HH:mm:ss +ffff yyyy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeOffset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Utf8JsonReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeToConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;JsonSerializerOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DateTimeOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ParseExact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TwitterDateFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CultureInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvariantCulture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Utf8JsonWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;DateTimeOffset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;JsonSerializerOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteStringValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TwitterDateFormat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CultureInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvariantCulture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;startup-configuration&quot;&gt;Startup Configuration&lt;/h4&gt;

&lt;p&gt;The only thing left to do now is to add my new converter to the collection of JSON converters that ASP.NET Core will use when handling requests to my API.  I do that in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigureServices(..)&lt;/code&gt; method in my Startup.cs:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IServiceCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddJsonOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            
            &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonSerializerOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Converters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TwitterDateTimeOffsetConverter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Add any other converters here&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// I typically add JsonStringEnumConverter to my APIs&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I restart my service and send a test payload to my endpoint and everything is &lt;code class=&quot;highlighter-rouge&quot;&gt;200 - OK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Life is good.  :-)&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="dotnet" /><category term="asp-net-core" /><category term="json" /><category term="serialization" /><category term="web-api" /><category term="twitter" /><summary type="html">This weekend I came across some oddly formatted datetimes while playing around with Twitter webhooks. When it came time to test my API endpoint to receive the Twitter event, I received a 400 response with a message indicating that one of the date fields the JSON payload could not be deserialized into a DateTimeOffset. In this post I'll demonstrate how to write a custom converter to solve this and similar JSON deserialization problems in an ASP.NET Core Web API.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.jonblankenship.com//2020/05/03/custom-date-deserialization-in-aspnet-core-web-api/clock.jpg" /></entry><entry><title type="html">Global Exception Handling in ASP.NET Core Web API</title><link href="https://blog.jonblankenship.com//2020/04/12/global-exception-handling-in-aspnet-core-api/" rel="alternate" type="text/html" title="Global Exception Handling in ASP.NET Core Web API" /><published>2020-04-12T19:30:00-05:00</published><updated>2020-04-12T19:30:00-05:00</updated><id>https://blog.jonblankenship.com//2020/04/12/global-exception-handling-in-aspnet-core-api</id><content type="html" xml:base="https://blog.jonblankenship.com//2020/04/12/global-exception-handling-in-aspnet-core-api/">&lt;p&gt;A good web API is consistent and follows established patterns for communicating error states to the client, leveraging the appropriate HTTP status codes.  To that end, a global exception handler can be very helpful in consolidating a service’s error handling logic in one place and translating errors into the appropriate responses to send back to the client.  In this post I’ll show you how you can plug custom exception-handling logic into the ASP.NET Core request pipeline to handle any exceptions that are thrown in your API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;AspNetCoreMiddleware.png&quot; alt=&quot;ASP.NET Core Middleware&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ASP.NET Core gives provides the ability to write middleware, which is logic inserted into the pipeline that the framework runs for every request that is received by the application.  ASP.NET Core ships with core middleware components that enable things like rendering MVC pages, defining endpoint routes, and adding authentication support, and these things are configured in the application’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup&lt;/code&gt; class, where you can also add your own custom middleware components.  This ability to easily configure and customize how ASP.NET Core processes requests is tremendously useful and powerful.  The &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-3.1&quot;&gt;Microsoft documentation&lt;/a&gt; goes into more detail on how middleware works in ASP.NET Core, so I won’t spend too much more time on this.&lt;/p&gt;

&lt;p&gt;For this post, we’ll be creating exception-handling middleware to catch and handle any exceptions that are thrown during the execution of a request to our service.  This is something I implement in every API that I write, and it not only makes the handling of exceptions and the responses from my API consistent, but it also helps keep my codebase a bit cleaner.&lt;/p&gt;

&lt;p&gt;The source code for the sample project demonstrating what we’ll be implementing here can be found on Github &lt;a href=&quot;https://github.com/jonblankenship/blog-examples/tree/master/ErrorHandlingMiddlewareSample&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;error-handling-middleware&quot;&gt;Error-Handling Middleware&lt;/h2&gt;

&lt;p&gt;Let’s jump straight to the code.  Here’s our &lt;a href=&quot;https://github.com/jonblankenship/blog-examples/blob/master/ErrorHandlingMiddlewareSample/Middleware/ErrorHandlingMiddleware.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt;&lt;/a&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ErrorHandlingMiddleware&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ErrorHandlingMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandleExceptionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandleExceptionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpStatusCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackTrace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exceptionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BadRequestException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BadRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exceptionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotFoundException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InternalServerError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Development&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;stackTrace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackTrace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke(..)&lt;/code&gt; method of our middleware component, we wrap the invocation of our &lt;code class=&quot;highlighter-rouge&quot;&gt;_next&lt;/code&gt; delegate in a &lt;code class=&quot;highlighter-rouge&quot;&gt;try..catch&lt;/code&gt;.  So any processing that happens further along in the pipeline will be included in this &lt;code class=&quot;highlighter-rouge&quot;&gt;try..catch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If there’s an exception, our &lt;code class=&quot;highlighter-rouge&quot;&gt;HandleExceptionAsync(..)&lt;/code&gt; method handles it, where we have access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpContext&lt;/code&gt; for the request, as well as the &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; that occurred.  If you implement something similar, this is where you’ll likely modify the logic to meet your desired behavior according to your needs.  Here I branch depending on the type of exception that was thrown.&lt;/p&gt;

&lt;p&gt;Note that we’re setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;StatusCode&lt;/code&gt; property on the &lt;code class=&quot;highlighter-rouge&quot;&gt;context.Response&lt;/code&gt; object depending on the type of exception that we’re handling.  We’re also writing out the error message to the response body, as well as the the stack trace, in the case of an unhandled exception when running in the “Development” environment.&lt;/p&gt;

&lt;p&gt;If I’m explicitly throwing an exception in my application, usually I’ll create my own custom exception type that inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; for the particular exceptional scenario.  In this case, I’ve created &lt;code class=&quot;highlighter-rouge&quot;&gt;BadRequestException&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NotFoundException&lt;/code&gt;, which map nicely  to HTTP response codes, but your situation may differ.  Your exceptions may be more specific to your particular API.&lt;/p&gt;

&lt;p&gt;Here’s my rather boring &lt;code class=&quot;highlighter-rouge&quot;&gt;NotFoundException&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotFoundException&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotFoundException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configuring-the-middleware&quot;&gt;Configuring the Middleware&lt;/h2&gt;

&lt;p&gt;To configure our API to use our new &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt;, we call &lt;code class=&quot;highlighter-rouge&quot;&gt;app.UseMiddleware(..)&lt;/code&gt;, passing our middleware type in our &lt;a href=&quot;https://github.com/jonblankenship/blog-examples/blob/7d1192f7d21e2532d4deae6d785ff25a06fa5144/ErrorHandlingMiddlewareSample/Startup.cs#L41&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Program&lt;/code&gt;&lt;/a&gt; class’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Configure(..)&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IApplicationBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IWebHostEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsDevelopment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Hook in the global error-handling middleware&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorHandlingMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Register any middleware to report exceptions to a third-party service *after* our ErrorHandlingMiddleware&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseExcepticon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// snip&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the order in which you register middleware in your application’s request pipeline matters.  The various middleware components execute sequentially in the order in which they’re registered.  In the case of a global exception handler like our &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt;, we’ll register it early in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Configure(..)&lt;/code&gt; method so that it captures exceptions that occur in downstream middleware components.&lt;/p&gt;

&lt;p&gt;Also note that if you’re using an exception tracking service that captures the exception for reporting but then re-throws it to allow it to be handled upstream, that middleware registration should happen after the registration of our &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt;.  In this sample I’m using &lt;a href=&quot;https://excepticon.io&quot;&gt;Excepticon&lt;/a&gt;.  (Full disclosure:  I &lt;a href=&quot;https://blog.jonblankenship.com/2020/03/05/excepticon-exception-monitoring-for-dot-net/&quot;&gt;wrote Excepticon&lt;/a&gt;.)  But using a third-party exception tracking service is absolutely &lt;strong&gt;not&lt;/strong&gt; necessary for implementing global exception handling for you API like what I’m describing in this post.&lt;/p&gt;

&lt;p&gt;When our &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt; catches an exception, execution of the pipeline halts, it sets the appropriate settings on the response, and the API call immediately returns the response to the client.&lt;/p&gt;

&lt;h2 id=&quot;application-code&quot;&gt;Application Code&lt;/h2&gt;

&lt;p&gt;Handling exceptions globally in our middleware not only gives us a uniform way to handle unexpected exceptions that occur in our API, but it also allows us to eliminate some boilerplate code in our controllers, if desired.&lt;/p&gt;

&lt;p&gt;In the sample project, there’s a &lt;a href=&quot;https://github.com/jonblankenship/blog-examples/blob/7d1192f7d21e2532d4deae6d785ff25a06fa5144/ErrorHandlingMiddlewareSample/Controllers/StocksController.cs#L27&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StocksController&lt;/code&gt;&lt;/a&gt; that has a &lt;code class=&quot;highlighter-rouge&quot;&gt;GetById(Guid stockId)&lt;/code&gt; method that calls a domain service to get a specific stock by ID.  The controller method returns the requested stock to the caller:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{stockId}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stocksService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OkObjectResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a very barebones example and most real controller methods probably won’t be this thin.  But note that we’re only worrying about the happy path here - what if the client sends us a &lt;code class=&quot;highlighter-rouge&quot;&gt;stockId&lt;/code&gt; that we don’t have?&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;GetStock(Guid stockId)&lt;/code&gt; method on the &lt;a href=&quot;https://github.com/jonblankenship/blog-examples/blob/7d1192f7d21e2532d4deae6d785ff25a06fa5144/ErrorHandlingMiddlewareSample/Services/StocksService.cs#L24&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StocksService&lt;/code&gt;&lt;/a&gt; domain service considers a request for a &lt;code class=&quot;highlighter-rouge&quot;&gt;stockId&lt;/code&gt; that doesn’t exist to be an exceptional case.  That is, it shouldn’t happen, and if it does, the service immediately aborts, short-circuiting any further execution, and expects someone upstream to handle the exception.  It throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;NotFoundException&lt;/code&gt; accordingly:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Returns the &amp;lt;see cref=&quot;Stock&quot;/&amp;gt; with the requested &amp;lt;see cref=&quot;stockId&quot;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&quot;stockId&quot;&amp;gt;The ID of the &amp;lt;see cref=&quot;Stock&quot;/&amp;gt; to return&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;returns&amp;gt;The &amp;lt;see cref=&quot;Stock&quot;/&amp;gt; with the requested &amp;lt;see cref=&quot;stockId&quot;/&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;exception cref=&quot;NotFoundException&quot;&amp;gt;&amp;lt;/exception&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetStock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StockId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotFoundException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Stock with ID &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stockId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; not found.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When this exception is thrown, the normal execution is interrupted and the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; block on our &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt; takes over.  We stop execution closer to where the exception occurs, and avoid branching logic in our controller to determine whether to return a 200- or a 400-series HTTP response code.&lt;/p&gt;

&lt;p&gt;Note that the method documentation indicates the exception type(s) that this method might throw.  This is helpful for consumers of &lt;code class=&quot;highlighter-rouge&quot;&gt;IStockService&lt;/code&gt; to know what types of exceptions might be thrown when invoking the method.&lt;/p&gt;

&lt;h3 id=&quot;a-note-on-this-example&quot;&gt;A Note on this Example&lt;/h3&gt;

&lt;p&gt;Some developers will bristle at the idea of using an exception for the purpose in my example above, arguing that throwing is an expensive operation, and if you can anticipate an exceptional case, you should code for it.  Don’t use exceptions for control flow.&lt;/p&gt;

&lt;p&gt;While I understand and agree with the spirit of this objection, I tend to take a more pragmatic position.&lt;/p&gt;

&lt;p&gt;This approach eliminates a fair amount of boilerplate &lt;code class=&quot;highlighter-rouge&quot;&gt;if...else&lt;/code&gt; branching logic up the callstack until we get to the controller where we can handle it and return the appropriate HTTP response, especially if the callstack is deep or we invoke this method from multiple controller methods.  For me, the benefit in terms of readability and maintainability is worth the cost of throwing the exception in this case, especially since this condition won’t normally happen.  The likelihood of it happening is further reduced in cases where I control both the API and the client(s).&lt;/p&gt;

&lt;p&gt;The ASP.NET Core middleware pattern gives us a clean and elegant way to interrupt execution and handle error conditions.&lt;/p&gt;

&lt;p&gt;I wouldn’t take this approach on an API where I was trying to squeeze out very last drop of performance or an API running at massive scale.  But it has served me well on the APIs that I’ve written.&lt;/p&gt;

&lt;p&gt;Even if you don’t like my example and you choose not to throw exceptions for error conditions like the one above in your API code, implementing a global exception handling middleware component like I’ve described is still a good way to uniformly handle exceptions that you don’t anticipate.&lt;/p&gt;

&lt;h2 id=&quot;testing-it-out&quot;&gt;Testing It Out&lt;/h2&gt;

&lt;p&gt;If we run the sample, we see that a call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /stocks/{stockId}&lt;/code&gt; endpoint with a valid ID returns a 200 response with the stock data in the response body:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;GetStock200.png&quot; alt=&quot;Get Stock Postman Call - 200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we switch the &lt;code class=&quot;highlighter-rouge&quot;&gt;stockId&lt;/code&gt; to an ID that doesn’t exist, we see that the API returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; and the message we included with our exception is included in the message body:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;GetStock404.png&quot; alt=&quot;Get Stock Postman Call - 404&quot; /&gt;Further, if we manually throw an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationException&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;StocksService.Get(Guid stockId)&lt;/code&gt; method, we get a &lt;code class=&quot;highlighter-rouge&quot;&gt;500 Internal Service&lt;/code&gt; response with the error and stackTrace included in the response body, since &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationException&lt;/code&gt; is not one of the exception types that we’re specifically handling in &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;GetStock500.png&quot; alt=&quot;Get Stock Postman Call - 500&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;In this post we’ve shown how to implement a global exception handler in an ASP.NET Core web API.  By creating an ASP.NET Core middleware component, we’re able to catch and handle exceptions uniformly and ensure that the API is returning consistent and expected responses to its callers.&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="dotnet" /><category term="asp-net-core" /><category term="middleware" /><category term="web-api" /><category term="exception-handling" /><summary type="html">A good web API is consistent and follows established patterns for communicating error states to the client, leveraging the appropriate HTTP status codes. To that end, a global exception handler can be very helpful in consolidating a service's error handling logic in one place and translating errors into the appropriate responses to send back to the caller. In this post I'll show you how you can plug your custom exception-handling logic into the ASP.NET Core request pipeline to handle any exceptions that are thrown in your service.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.jonblankenship.com//2020/04/12/global-exception-handling-in-aspnet-core-api/AspNetCoreMiddleware.png" /></entry><entry><title type="html">Razor-Powered E-mail in Azure Functions</title><link href="https://blog.jonblankenship.com//2020/04/05/razor-powered-e-mail-in-azure-functions/" rel="alternate" type="text/html" title="Razor-Powered E-mail in Azure Functions" /><published>2020-04-05T09:15:00-05:00</published><updated>2020-04-05T09:15:00-05:00</updated><id>https://blog.jonblankenship.com//2020/04/05/razor-powered-e-mail-in-azure-functions</id><content type="html" xml:base="https://blog.jonblankenship.com//2020/04/05/razor-powered-e-mail-in-azure-functions/">&lt;p&gt;On a couple of recent projects I’ve had the need to send automated e-mails to my users.  For both implementations I chose the same approach:  use &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-3.1&quot;&gt;Razor&lt;/a&gt; templates combined with &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/&quot;&gt;Azure Functions&lt;/a&gt; to build a simple, maintainable, and loosely-coupled solution for sending transactional e-mails.&lt;/p&gt;

&lt;p&gt;In this post I’ll show you how to do the same.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;HighLevelFlow.png&quot; alt=&quot;High-level flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At a high level, here’s what happens when my application needs to send an e-mail:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Application code determines that an e-mail should be sent.&lt;/li&gt;
  &lt;li&gt;Application code writes a message to an &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-queues-topics-subscriptions&quot;&gt;Azure Service Bus&lt;/a&gt; queue (&lt;code class=&quot;highlighter-rouge&quot;&gt;email-queue&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Azure Function (&lt;code class=&quot;highlighter-rouge&quot;&gt;email-queue-trigger-function&lt;/code&gt;) receives message from Service Bus queue.&lt;/li&gt;
  &lt;li&gt;Azure Function builds e-mail from a Razor template and a template model.&lt;/li&gt;
  &lt;li&gt;Azure Function sends e-mail.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For this post, I’ll focus on steps 3 through 5, the building and sending of the e-mail from an Azure Function.&lt;/p&gt;

&lt;h2 id=&quot;why-this-approach&quot;&gt;Why This Approach?&lt;/h2&gt;

&lt;p&gt;I like this approach for a couple of reasons.  Let’s talk about why I chose this path first, and then we’ll get into the code.&lt;/p&gt;

&lt;h3 id=&quot;azure-functions&quot;&gt;Azure Functions&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;AzureFunctions.png&quot; alt=&quot;Azure Functions&quot; class=&quot;float-right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My application already uses Azure Functions for some of its processing, and my requirement is to automatically send a user an e-mail when certain conditions are met during the course of that processing.  Sending the e-mail is a side effect of the core domain processing - it should certainly happen, but I want it to happen in a separate process.  I consider the building and sending of e-mails as supporting application logic and not part of my domain logic.&lt;/p&gt;

&lt;p&gt;Using a &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-service-bus-trigger?tabs=csharp&quot;&gt;Service Bus-triggered Azure Function&lt;/a&gt; works nicely for this.  When the conditions are met that need to trigger an e-mail, the core process can simply enqueue the appropriate message on the e-mail Service Bus queue and continue with its work.  Fire and forget.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;ServiceBusQueue.png&quot; alt=&quot;Service Bus Queue&quot; class=&quot;float-right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Service Bus queue is durable and reliable.  We can rest assured that once the message is on the queue, it won’t be lost.  The Service Bus-triggered Azure Function responsible for sending e-mails is invoked as soon as there is a message on the queue, and it starts its work building and sending the e-mail.  If there’s a failure in my receiving Azure Function or it’s down for some reason, the Service Bus queue will keep the message until it can be properly handled.&lt;/p&gt;

&lt;p&gt;Isolating the e-mail sending logic in its own Azure Function offers a few benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It promotes &lt;a href=&quot;https://en.wikipedia.org/wiki/Loose_coupling&quot;&gt;loose coupling&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;It keeps the domain code focused and not concerned with supporting functions.&lt;/li&gt;
  &lt;li&gt;It can be scaled independently from other functions.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;razor-templates&quot;&gt;Razor Templates&lt;/h3&gt;

&lt;p&gt;Razor templates are particularly well-suited for defining the layout of an HTML-based e-mail.  Razor is a markup language used tor generating HTML from a Razor template combined with a C# object.&lt;/p&gt;

&lt;p&gt;Razor allows you to define the body of your layout &lt;a href=&quot;https://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;declaratively&lt;/a&gt;, which is a natural programming paradigm for expressing a desired outcome, like a user interface, query result, file format, or, as in our case, an e-mail body.&lt;/p&gt;

&lt;p&gt;I define a Razor e-mail template for each type of e-mail that my application needs to send.  Each template has a corresponding model class, representing the data that is needed to render that template.  When I need to render the template (to build the e-mail), I pass my template and an instance of the corresponding model class to a Razor rendering engine, and it returns the generated HTML as a string.&lt;/p&gt;

&lt;p&gt;I much prefer this approach to building the e-mail body &lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot;&gt;imperatively&lt;/a&gt; by concatenating strings in C#!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;RazorCompilation.png&quot; alt=&quot;Diagram showing compilation of Razor template and model to HTML&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;There are a couple of prerequisites we’ll need in order to get our Azure Function sending e-mail:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Razor Rendering Engine - I’m using the &lt;a href=&quot;https://www.nuget.org/packages/RazorLight.Unofficial/2.0.0-beta1.3&quot;&gt;RazorLight.Unofficial 2.0.0-beta1.3&lt;/a&gt; package to generate my HTML from the Razor template and model.  It’s a pre-release package, but if that makes you squeamish there are other alternatives out there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Transactional E-mail Service - For my e-mail service I’m using &lt;a href=&quot;https://www.mailgun.com/&quot;&gt;Mailgun&lt;/a&gt;, which I’ve been fairly happy with.  You can send e-mail via their HTTP API or by SMTP, and they offer many of the features that you’d expect from an enterprise e-mail service.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Let’s dig into some code.  We’ll start by looking at the e-mail message that we’ll be sending.&lt;/p&gt;

&lt;h3 id=&quot;the-message&quot;&gt;The Message&lt;/h3&gt;

&lt;h5 id=&quot;razor-template&quot;&gt;Razor Template&lt;/h5&gt;

&lt;p&gt;All of my e-mail templates live in a folder in my Functions project called &lt;code class=&quot;highlighter-rouge&quot;&gt;\EmailTemplates&lt;/code&gt;.  In it there’s a Razor template named &lt;code class=&quot;highlighter-rouge&quot;&gt;NewExceptionGroupTemplate.cshtml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@model ServiceTrace.Domain.Model.Email.NewExceptionGroupModel

&amp;lt;h3&amp;gt;@Model.Subject&amp;lt;/h3&amp;gt;

&amp;lt;p&amp;gt;To view the full exception details, click &amp;lt;a href='@Model.Url'&amp;gt;here&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;div&amp;gt;&amp;lt;strong&amp;gt;Message:&amp;lt;/strong&amp;gt; @Model.Message&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;strong&amp;gt;Time Occurred:&amp;lt;/strong&amp;gt; @Model.TimeOccurred.ToString(&quot;G&quot;) UTC&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;strong&amp;gt;Stack Trace:&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;@Model.StackTrace&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;  Set the Build Action for all Razor email templates to &lt;code class=&quot;highlighter-rouge&quot;&gt;Embedded Resource&lt;/code&gt; and the Copy to Output Directory to &lt;code class=&quot;highlighter-rouge&quot;&gt;Do not copy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;EmbeddedResourceProperties.png&quot; alt=&quot;Razor template file properties&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;template-model&quot;&gt;Template Model&lt;/h5&gt;

&lt;p&gt;The model that provides the data for this template is &lt;code class=&quot;highlighter-rouge&quot;&gt;NewExceptionGroupModel&lt;/code&gt;.  It’s a &lt;a href=&quot;https://en.wikipedia.org/wiki/Plain_old_CLR_object&quot;&gt;POCO&lt;/a&gt; that has properties for each of the data items that will be merged into the Razor template:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewExceptionGroupModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEmailTemplateModel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NewExceptionGroupModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NewExceptionGroupModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionInstance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IProject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;New exception thrown in &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TimeOccurred&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StackTrace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TemplateName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NewExceptionGroupTemplate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeOffset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeOccurred&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackTrace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;IEmailTemplateModel&lt;/code&gt; has a couple of properties that are common to all of my e-mail template models:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IEmailTemplateModel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TemplateName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;TemplateName&lt;/code&gt; property identifies the Razor template that this model corresponds with.  It will be used to retrieve the appropriate Razor template when we’re ready to generate the HTML for the e-mail body.  The rest of the properties are data items that will be merged into the Razor template.&lt;/p&gt;

&lt;p&gt;So that’s all that’s needed to define the e-mail message body - we’ll see how it gets turned into HTML in a moment…&lt;/p&gt;

&lt;h3 id=&quot;receive-the-message&quot;&gt;Receive the Message&lt;/h3&gt;

&lt;p&gt;I’m using a Service Bus queue, cleverly named &lt;code class=&quot;highlighter-rouge&quot;&gt;email-queue&lt;/code&gt;, as the channel by which the rest of my application notifies my e-mail function that an e-mail needs to be sent.  To do this, the application creates a new &lt;code class=&quot;highlighter-rouge&quot;&gt;NewExceptionGroupModel&lt;/code&gt; with the appropriate data and puts it on the queue with a couple of additional user properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EmailModelType - tells the e-mail function what type of model is in the queue message body.&lt;/li&gt;
  &lt;li&gt;ToEmailAddress - tells the e-mail function who to send the e-mail to.  (I’ve made this a user property on the message, but there’s no reason why it couldn’t be defined on &lt;code class=&quot;highlighter-rouge&quot;&gt;IEmailTemplateModel&lt;/code&gt; and be part of the model.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function that responds to a new message on &lt;code class=&quot;highlighter-rouge&quot;&gt;email-queue&lt;/code&gt; reads the user properties on the message and deserializes the message body into an instance of the appropriate e-mail template model, &lt;code class=&quot;highlighter-rouge&quot;&gt;NewExceptionGroupModel&lt;/code&gt; in this case, and invokes &lt;code class=&quot;highlighter-rouge&quot;&gt;_emailSender.SendEmailAsync(..)&lt;/code&gt; to build and send the e-mail:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email-queue-trigger-function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ServiceBusTrigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email-queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ServiceBusConnectionString&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExcepticonSdk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_appSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExcepticonOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailModelTypeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailModelTypeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;IEmailTemplateModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewExceptionGroupModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;emailModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewExceptionGroupModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// handle other types of e-mails here&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emailModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_emailSender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SendEmailAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EmailAddress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ExcepticonSdk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CaptureException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Shameless plug:  I’ve wrapped my function body in a &lt;code class=&quot;highlighter-rouge&quot;&gt;try..catch&lt;/code&gt; that sends any exceptions that occur to &lt;a href=&quot;https://excepticon.io&quot;&gt;Excepticon&lt;/a&gt;, an exception monitoring service.  I built Excepticon and wrote about it in a &lt;a href=&quot;https://blog.jonblankenship.com/2020/03/05/excepticon-exception-monitoring-for-dot-net/&quot;&gt;previous post&lt;/a&gt;.  Using Excepticon is certainly not required for the topic we’re discussing here, but if you’re looking for an exception monitoring service, I invite you to check it out.  Now, back to our program…)&lt;/p&gt;

&lt;h3 id=&quot;build-and-send&quot;&gt;Build and Send&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailSender&lt;/code&gt; instance is managed my IoC container and injected into the function.  The interface is straight-forward:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IEmailSender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendEmailAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEmailTemplateModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;IEmailSender.SendEmailAsync(..)&lt;/code&gt; consists of rendering the e-mail template and corresponding model as a string of HTML, and then building the web request to &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; to the Mailgun API:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailSender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEmailSender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAppSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_appSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RazorLightEngine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_razorLightEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MailGunBaseUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://api.mailgun.net/v3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailSender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAppSettings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_appSettings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appSettings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;_razorLightEngine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RazorLightEngineBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetOperatingAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetExecutingAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseEmbeddedResourcesProject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseMemoryCachingProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;_httpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendEmailAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEmailTemplateModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBody&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RenderEmailTemplateAsStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FormUrlEncodedContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_appSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SupportEmailAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PostAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_appSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/messages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EnsureSuccessStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RenderEmailTemplateAsStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEmailTemplateModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templatePath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;EmailTemplates.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TemplateName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.cshtml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_razorLightEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CompileRenderAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templatePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MailGunBaseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authHeader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;api:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_appSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MailGunApiKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultRequestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;Bearer &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Base64Encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s it!  Most of the heavy lifting is done by the &lt;code class=&quot;highlighter-rouge&quot;&gt;RazorLightEngine&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Mailgun&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h2&gt;

&lt;p&gt;There are a few bumps I ran into along the way while trying to get this to work.  Hopefully this will save you some pain if you’re going down the same path.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Error compiling Razor when using the latest Microsoft.NET.Sdk.Functions package (3.0.5)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;My call to &lt;code class=&quot;highlighter-rouge&quot;&gt;_razorLightEngine.ComplieRenderAsync(..)&lt;/code&gt; was throwing the following error:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Could not load file or assembly 'System.IdentityModel.Tokens.Jwt, Version=5.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This issue is documented &lt;a href=&quot;https://github.com/Azure/azure-functions-host/issues/5756&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The workaround is to downgrade Microsoft.NET.Sdk.Functions to 3.0.3.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Project settings to support RazorLight rendering&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;There are a couple of settings you’ll probably have to set in your Azure Functions project file to enable the RazorLight rendering.  I had to set &lt;code class=&quot;highlighter-rouge&quot;&gt;PreserveCompilationReferences&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PreserveCompilationContext&lt;/code&gt; both to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;netcoreapp3.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;AzureFunctionsVersion&amp;gt;&lt;/span&gt;v2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AzureFunctionsVersion&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;PreserveCompilationReferences&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PreserveCompilationReferences&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;PreserveCompilationContext&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PreserveCompilationContext&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The &lt;a href=&quot;https://github.com/toddams/RazorLight&quot;&gt;RazorLight project page&lt;/a&gt; lists these and a couple of other project settings towards the bottom of the page that you may need to set depending on your circumstances.&lt;/p&gt;

    &lt;p&gt;The two I mentioned above were the only ones I had to set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“Mailgun Magnificent API” response&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;It took me a little trial and error to get my Mailgun API calls to succeed and actually send the e-mail.  For awhile I was getting a 200 response from the service, but the response body contained the string “Mailgun Magnificent API” and the e-mail wouldn’t send.&lt;/p&gt;

    &lt;p&gt;According to a comment on &lt;a href=&quot;https://stackoverflow.com/questions/46163664/765-unexpected-token-at-mailgun-magnificent-api-ruby-on-rails-mailgun-rails&quot;&gt;this Stack Overflow question&lt;/a&gt;, “‘Mailgun Magnificent API’ is Mailgun’s way of saying ‘Your sender domain and auth are all good, but I can’t figure out what API you’re asking for.”&lt;/p&gt;

    &lt;p&gt;If you get this, I’d suggest inspecting the way I set my &lt;code class=&quot;highlighter-rouge&quot;&gt;_httpClient.BaseAddress&lt;/code&gt; and how I build the URL for the &lt;code class=&quot;highlighter-rouge&quot;&gt;PostAsync(..)&lt;/code&gt; call.  If you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; in the wrong place, you’ll get this response.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Today we’ve seen why using Razor templates coupled with Azure Functions is a good approach to sending transactional e-mails from your application.  We’ve also seen how to implement this approach.&lt;/p&gt;

&lt;p&gt;I hope it helps you if you’re considering going down the same path.&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="dotnet" /><category term="asp-net-core" /><category term="azure" /><category term="azure-functions" /><category term="razor" /><category term="service-bus" /><category term="e-mail" /><category term="mailgun" /><category term="razorlight" /><summary type="html">On a couple of recent side projects I've had the need to send automated e-mails to my users. For both implementations I chose the same approach: use Razor templates combined with Azure Functions to build a simple, maintainable, and loosely-coupled solution for sending transactional e-mails. In this post I'll show you how to do the same.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.jonblankenship.com//2020/04/05/razor-powered-e-mail-in-azure-functions/HighLevelFlow.png" /></entry><entry><title type="html">Differentiating Yourself from the Competition</title><link href="https://blog.jonblankenship.com//2020/03/22/differentiating-yourself-from-the-competition/" rel="alternate" type="text/html" title="Differentiating Yourself from the Competition" /><published>2020-03-22T16:15:00-05:00</published><updated>2020-03-22T16:15:00-05:00</updated><id>https://blog.jonblankenship.com//2020/03/22/differentiating-yourself-from-the-competition</id><content type="html" xml:base="https://blog.jonblankenship.com//2020/03/22/differentiating-yourself-from-the-competition/">&lt;p&gt;I was recently asked this question about &lt;a href=&quot;https://excepticon.io&quot;&gt;Excepticon&lt;/a&gt; in an online forum:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Okay, so the idea is valid, but WHAT makes you different than your competition? If money was not an issue, why would I pick you over something like New Relic?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an important question, not only for me specifically, but for anyone launching a product into a market with even one competitor:  &lt;strong&gt;What differentiates your product from your competitors?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;chess-piece.jpg&quot; alt=&quot;A chess piece that is different from the rest&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Photo by &lt;a href=&quot;https://unsplash.com/@randyfath?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Randy Fath&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/different?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;I’ve &lt;a href=&quot;https://blog.jonblankenship.com/2020/03/05/excepticon-exception-monitoring-for-dot-net/&quot;&gt;mentioned before&lt;/a&gt; that one of my reasons for building Excepticon is to test the hypothesis that your idea doesn’t have to be unique, that it’s ok (perhaps even advantageous in some regards) to launch into a market with competitors.  But to do so and be successful, you need to differentiate your product from the alternatives.&lt;/p&gt;

&lt;p&gt;Going up against an incumbent player in a niche &lt;em&gt;without&lt;/em&gt; differentiation is a losing proposition.  Even if the products are identical feature-for-feature, an established competitor have several big advantages over a newcomer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An existing user base&lt;/li&gt;
  &lt;li&gt;Brand recognition/reputation&lt;/li&gt;
  &lt;li&gt;Proven ability to execute&lt;/li&gt;
  &lt;li&gt;Market share&lt;/li&gt;
  &lt;li&gt;Established channels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unless there is something different about your product that makes it preferable in the eyes of at a least a segment of the market, you’ll fail to gain any traction.&lt;/p&gt;

&lt;p&gt;Differentiation is key, and it’s important to have a strategy for how you’ll differentiate yourself early on in the process of building your SaaS.&lt;/p&gt;

&lt;h2 id=&quot;how-is-excepticon-different&quot;&gt;How Is Excepticon Different?&lt;/h2&gt;

&lt;p&gt;I am differentiating Excepticon in four main areas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Target Niche&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;I cater to solo .NET devs and small teams.  The forum question I received mentions New Relic - products like New Relic are great, but they’re geared toward the enterprise, or at least that’s what it feels like looking at their landing page and marketing material.  They offer a bunch of different solutions, dashboards, reports, and integrations in their platform that I just don’t need or care about as a solo founder/dev.  Just give me a simple service that does its one or two things that I need well and at a fair price and I’ll buy it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;There are certain features that I want in a solution that aren’t in the existing services that I’ve evaluated.  I won’t get into specific features here - I’ll be developing them over the coming months.  But I recognize that I can’t compete on features out of the gate, because in the spirit of building an MVP, I launched as soon as I had the core feature set that I felt was needed to launch and still provide value.  As the product develops over the coming months, I’ll be adding features that will help to differentiate Excepticon from other services.  It’s not there yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Branding/Personality&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The brand or personality of the company plays a part in consumers’ buying decisions.  My personality (for better or worse) will be a part of Excepticon - it won’t be a faceless product.  I plan to be fairly public about what I’m doing as I build it, market it, and succeed or fail with it.  I’ll be part of the product.  My message may resonate with some folks who want to support indie software and transparent makers, and it may turn some people off.  And that’s ok.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Price&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The question I received on the forum had the caveat “if money was not an issue,” but the fact of the matter is that money plays a big part in consumer’s minds when choosing a service, especially if they’re in the niche that I’m targeting.  So I won’t ignore it - price is a differentiator, and I will be one of the lower-priced options, accessible to my target market.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Out of the gate I can differentiate myself in the first, third, and fourth areas.  It will take a bit of time before I can differentiate on features.&lt;/p&gt;

&lt;h2 id=&quot;how-are-you-different&quot;&gt;How Are You Different?&lt;/h2&gt;

&lt;p&gt;These certainly aren’t the only ways that one can differentiate their product from the rest.  Perhaps your strategy for your product includes differentiating in areas that I’ve not mentioned, like offering customer service that goes above and beyond or leveraging unique marketing and distribution channels, for example.&lt;/p&gt;

&lt;p&gt;Whatever the case may be, identify the ways in which your SaaS will be different than your competition and use that to your advantage.&lt;/p&gt;

&lt;p&gt;I should point out that while your competition has several advantages by being an established player in the market, there are benefits to being a small and nimble newcomer, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to experiment and pivot more easily&lt;/li&gt;
  &lt;li&gt;Lower overhead/expenses&lt;/li&gt;
  &lt;li&gt;Ability to ship faster&lt;/li&gt;
  &lt;li&gt;Ability to do things that don’t scale&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use these to your advantage.&lt;/p&gt;

&lt;p&gt;As you try to gain a foothold in your market, remember what makes you and your product different from your competitors and push hard on those levers!&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="excepticon" /><category term="exception-monitoring" /><category term="dotnet" /><category term="bootstrap" /><category term="indie-hacker" /><category term="saas" /><category term="competition" /><summary type="html">I was recently asked on an online forum &quot;What makes Excepticon different from the competition?&quot; It's an important question, not only for me specifically, but for anyone launching a product into a market with even one competitor: What differentiates your product from your competitors?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.jonblankenship.com//2020/03/22/differentiating-yourself-from-the-competition/chess-piece.jpg" /></entry><entry><title type="html">Excepticon: Exception Monitoring for .NET</title><link href="https://blog.jonblankenship.com//2020/03/05/excepticon-exception-monitoring-for-dot-net/" rel="alternate" type="text/html" title="Excepticon: Exception Monitoring for .NET" /><published>2020-03-05T06:15:00-06:00</published><updated>2020-03-05T06:15:00-06:00</updated><id>https://blog.jonblankenship.com//2020/03/05/excepticon-exception-monitoring-for-dot-net</id><content type="html" xml:base="https://blog.jonblankenship.com//2020/03/05/excepticon-exception-monitoring-for-dot-net/">&lt;p&gt;Today I’m pleased to announce the launch of &lt;a href=&quot;https://excepticon.io&quot;&gt;Excepticon&lt;/a&gt;, an exception monitoring SaaS for .NET applications and services.  Excepticon is easy to configure and simple to use, and it’s geared specifically towards .NET developers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Excepticon Landing Page.PNG&quot; alt=&quot;Excepticon Landing Page&quot; class=&quot;w-100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re a .NET developer and you’re in the market for an exception monitoring service for your application or service, I invite you to try out either the free &lt;a href=&quot;https://excepticon.io/plans&quot;&gt;Developer plan&lt;/a&gt; or a 15-day trial on one of the paid &lt;a href=&quot;https://excepticon.io/plans&quot;&gt;plans&lt;/a&gt;.  I’d love to get your feedback on how I could improve it to meet your needs.&lt;/p&gt;

&lt;p&gt;The application is very much an MVP at this stage - it performs its core function and it does it well, but there’s more to come.  I’ll be building it out, improving the UI/UX, and adding features in the coming months.&lt;/p&gt;

&lt;p&gt;Here’s a peek at an exception in Excepticon:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Exception Instance 3.PNG&quot; alt=&quot;Excepticon Exception Instance&quot; class=&quot;w-100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So how did Excepticon come to be?&lt;/p&gt;

&lt;h3 id=&quot;inception&quot;&gt;Inception&lt;/h3&gt;

&lt;p&gt;On more than one of my past side-projects over the last couple of years I’d had the thought, “When I launch this, I’m going to need an easy way to stay on top of any exceptions that my app is throwing.  I should build an exception monitoring service.”&lt;/p&gt;

&lt;p&gt;Typical developer, right?&lt;/p&gt;

&lt;p&gt;It seemed like a fun little project that I could build in a relatively short amount of time to meet my needs.  There’s some interesting aspects to it.  I understood the domain.  I knew what features I’d want.  Maybe others would want to use it too.&lt;/p&gt;

&lt;p&gt;Why not?&lt;/p&gt;

&lt;p&gt;Why not.&lt;/p&gt;

&lt;p&gt;Well, for one, there’s already other well-established, full-featured exception monitoring services out there.&lt;/p&gt;

&lt;p&gt;Oh well.&lt;/p&gt;

&lt;p&gt;Idea dismissed.  Back to whatever I was working on before the thought entered my brain.&lt;/p&gt;

&lt;p&gt;Time passes.  Seasons change.  Fast-forward several months…&lt;/p&gt;

&lt;h5 id=&quot;the-decision-to-build&quot;&gt;The Decision to Build&lt;/h5&gt;

&lt;p&gt;Last fall, I listened to a podcast where the guest was a founder of a bootstrapped business that had launched into a market where there was existing competition.  He and his cofounders were enjoying success despite incumbents in their niche because they were executing on their vision of the product, offering a different version of what was already out there, and making themselves a part of their product.  He encouraged the listener to not view existing competition as a barrier to success.&lt;/p&gt;

&lt;p&gt;I’d heard similar advice before from guests of the &lt;a href=&quot;https://www.indiehackers.com/podcast&quot;&gt;Indie Hackers podcast&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your idea doesn’t have to be original.
Existing competition validates that there’s a market for your product.
The internet’s a big place.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea for what would become Excepticon resurfaced as I listened to the episode, but this time I was thinking about it in a new light.&lt;/p&gt;

&lt;p&gt;“Maybe the market is big enough for a new service in this space.  There are things about the current products that I would do differently, features that are missing.  There are ways that I can differentiate myself from the competition.”&lt;/p&gt;

&lt;p&gt;As I considered these things, I grew more excited about the project.  This would be a fun thing to build.  I’d build something that I’ll use, and I’d test the notion that it’s ok to build an app that solves an already solved problem.&lt;/p&gt;

&lt;p&gt;Unlike the prior times I’d considered the idea, this time I committed to building it and got to work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Exceptions List Mobile 1.png&quot; alt=&quot;Exceptions List&quot; class=&quot;w-50&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;objectives&quot;&gt;Objectives&lt;/h3&gt;

&lt;p&gt;I have a few objectives for Excepticon, some of which I’ve already mentioned, and several of which I plan to elaborate on in future posts.  Here they are, in no particular order:&lt;/p&gt;

&lt;h4 id=&quot;1-test-the-theory-your-idea-doesnt-have-to-be-unique&quot;&gt;1. Test the theory, “Your idea doesn’t have to be unique.”&lt;/h4&gt;

&lt;p&gt;Many folks wanting to build an app or start a business spend a lot of time trying to come up with a completely original idea, which is hard when you consider that many of the problems worth solving have already been solved.&lt;/p&gt;

&lt;p&gt;However there’s quite a bit of anecdotal evidence suggesting that success can be found in executing on an idea for which there’s already a solution by building a better product, targeting a slightly different niche, or differentiating yourself somehow.  Many companies that are thriving in, and in some cases even dominating, their respective industries today were not the first to market.  This is true for most of the top names in tech today, including Google, Apple, and Facebook, as well as hundreds of lesser-known companies operating very successfully on a smaller scale.&lt;/p&gt;

&lt;p&gt;Existing competition needn’t be feared.  The fact that other companies exist and people are paying them money to solve the same pain point validates the idea as well as the market.  There are billions of people on the internet; if your niche is large enough, you execute well, and you differentiate your product in some way, there’s usually room for another competitor.&lt;/p&gt;

&lt;p&gt;Or, at least, so goes the prevailing wisdom.&lt;/p&gt;

&lt;p&gt;One of my objectives for Excepticon is to test first-hand this notion that “your idea doesn’t have to be unique.”&lt;/p&gt;

&lt;h4 id=&quot;2-build-the-features-that-i-want&quot;&gt;2. Build the features that I want&lt;/h4&gt;

&lt;p&gt;There are several good exception monitoring services out there, but none of them tick all of the boxes of features that I’m looking for in a solution.  Excepticon doesn’t either in its current MVP state, but it will.  I’ll be prioritizing the features that matter to me as I plan out the post-MVP roadmap along with suggested features and changes that I receive from my users.&lt;/p&gt;

&lt;h4 id=&quot;3-build-for-the-net-developer-not-the-enterprise&quot;&gt;3. Build for the .NET developer, not the enterprise&lt;/h4&gt;

&lt;p&gt;Of the other exception monitoring services on the market, some of them target applications written in non-.NET languages and either don’t support .NET or .NET support is an afterthought, relying on the community to maintain a third-party Nuget package to integrate with their service.&lt;/p&gt;

&lt;p&gt;Of the ones that do target .NET, many are part of a larger suite of enterprise tools that are marketed to C-level executives with buzzwords like “synergies,” “AI,” and “business intelligence.”&lt;/p&gt;

&lt;p&gt;I’m building Excepticon for the .NET developer working independently or as part of a small team who needs a service to simply monitor their apps and services and to do it well.&lt;/p&gt;

&lt;h4 id=&quot;4-eat-my-own-dog-food&quot;&gt;4. Eat my own dog food&lt;/h4&gt;

&lt;p&gt;One of the best ways to understand how to improve your product is to be a user of your product.  With Excepticon I’m eating my own dog food.  Excepticon is using the same packages available to my end-users, and I’m monitoring for exceptions thrown by the Excepticon web app and API, which is already helping me to identify and fix pain points and things that can be improved.&lt;/p&gt;

&lt;p&gt;Not only am I using Excepticon to monitor Excepticon, but I plan to use it on future projects as well.&lt;/p&gt;

&lt;h4 id=&quot;5-have-fun&quot;&gt;5. Have fun&lt;/h4&gt;

&lt;p&gt;A side project should be something you enjoy working on.  Anything that consumes as much free time as building a SaaS does should bring some personal fulfillment, especially in the early days when it’s not making any money.  Further, if your heart’s not in it, you won’t stick to it and see it to completion.&lt;/p&gt;

&lt;p&gt;I’m having fun building Excepticon.  I’m excited about the features that are on the roadmap and the things that I will learn along the way.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I invite you to check out out &lt;a href=&quot;https://excepticon.io&quot;&gt;Excepticon&lt;/a&gt; today!&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="excepticon" /><category term="exception-monitoring" /><category term="dotnet" /><category term="bootstrap" /><category term="indie-hacker" /><category term="saas" /><category term="competition" /><summary type="html">Today I'm pleased to announce the launch of Excepticon, an exception monitoring SaaS for .NET applications and services. Excepticon is easy to configure and simple to use, and it's geared specifically towards .NET developers. If you're a .NET developer and you're in the market for an exception monitoring service for your application or service, I invite you to try it out. I'd love to get your feedback on how I could improve it to meet your needs.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.jonblankenship.com//2020/03/05/excepticon-exception-monitoring-for-dot-net/Excepticon%20Landing%20Page.PNG" /></entry><entry><title type="html">Using the Specification Pattern to Build a Data-Driven Rules Engine</title><link href="https://blog.jonblankenship.com//2019/10/04/using-the-specification-pattern-to-build-a-data-driven-rules-engine/" rel="alternate" type="text/html" title="Using the Specification Pattern to Build a Data-Driven Rules Engine" /><published>2019-10-04T21:34:00-05:00</published><updated>2019-10-04T21:34:00-05:00</updated><id>https://blog.jonblankenship.com//2019/10/04/using-the-specification-pattern-to-build-a-data-driven-rules-engine</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/10/04/using-the-specification-pattern-to-build-a-data-driven-rules-engine/">&lt;p&gt;In my &lt;a href=&quot;https://blog.jonblankenship.com/tag/stock-alerts/&quot;&gt;Stock Alerts&lt;/a&gt; project, the user configures criteria for a given stock that should be evaluated continuously and trigger a notification to the user when the criteria are satisfied.&lt;/p&gt;

&lt;p&gt;Rather than simply setting a single price trigger, I want the user to be able to specify multiple types of criteria and combine them using Boolean logic to form a complex rule.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For example, a dividend growth investor might want to be notified when JNJ meets the following criteria:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dividend &amp;gt; 2.5% &lt;strong&gt;AND&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Payout Ratio &amp;lt; 50% &lt;strong&gt;AND&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(PE Ratio &amp;lt; 20 &lt;strong&gt;OR&lt;/strong&gt; Price &amp;lt; 130)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;DecisionTree.PNG&quot; alt=&quot;Stock Alert Rules&quot; class=&quot;w-50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another investor might want a completely different set of criteria to alert them when their momentum stock darling is about to take off out of a range.&lt;/p&gt;

&lt;p&gt;So how do we accomplish this in a clean, configurable, and testable manner?&lt;/p&gt;

&lt;h2 id=&quot;enter-the-specification-pattern&quot;&gt;Enter the Specification Pattern&lt;/h2&gt;

&lt;p&gt;The specification pattern has been a valuable tool in my toolbox in the past, and it is the perfect tool for the job ahead of us today: building a data-driven rules engine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://amzn.to/2mqUJXv&quot;&gt;&lt;img src=&quot;Domain-Driven Design.jpg&quot; alt=&quot;Domain-Driven Design&quot; class=&quot;float-right&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The pattern was introduced by Eric Evans, author of &lt;a href=&quot;https://amzn.to/2mqUJXv&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt; and father of the domain-driven design (DDD) approach to software development.  Evans and &lt;a href=&quot;https://www.martinfowler.com/&quot;&gt;Martin Fowler&lt;/a&gt; co-wrote a &lt;a href=&quot;https://www.martinfowler.com/apsupp/spec.pdf&quot;&gt;white paper&lt;/a&gt; on specifications that is well worth the read addressing the uses of specification, types of specifications, and consequences of specification.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Specification_pattern&quot;&gt;Wikipedia article&lt;/a&gt; on the specification pattern gives us a pretty good definition (as well as some sample C# code) to start with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computer programming, the &lt;strong&gt;specification pattern&lt;/strong&gt; is a particular &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;software design pattern&lt;/a&gt;, whereby &lt;a href=&quot;https://en.wikipedia.org/wiki/Business_rules&quot;&gt;business rules&lt;/a&gt; can be recombined by chaining the business rules together using boolean logic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.martinfowler.com/apsupp/spec.pdf&quot;&gt;Evans and Fowler&lt;/a&gt; identify the core problems to which the specification pattern is applicable:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Selection: You need to select a subset of objects based on some criteria, and to refresh the selection at various times&lt;/li&gt;
    &lt;li&gt;Validation: You need to check that only suitable objects are used for a certain purpose&lt;/li&gt;
    &lt;li&gt;Construction-to-order: You need to describe what an object might do, without explaining the details of how the object does it, but in such a way that a candidate might be built to fulfill the requirement.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The solution to each of these problems is to build a specification that defines the criteria that an object must meet to satisfy the specification.  Typically, a specification has a method &lt;code class=&quot;highlighter-rouge&quot;&gt;IsSatisfied(candidate)&lt;/code&gt; that takes the candidate object as a parameter.  The method returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, depending on whether the candidate satisfies the criteria of the specification.&lt;/p&gt;

&lt;p&gt;In this post, we’ll focus on a particular type of specification, a &lt;strong&gt;composite specification&lt;/strong&gt;, to build our rules engine.  This type of specification gets its name from the fact that it is an implementation of another commonly used design pattern: the composite pattern.&lt;/p&gt;

&lt;h2 id=&quot;the-composite-pattern&quot;&gt;The Composite Pattern&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/0201633612/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0201633612&amp;amp;linkCode=as2&amp;amp;tag=jon100-20&amp;amp;linkId=a0440d199ca01de7a55bd344a1aa4f7b&quot;&gt;&lt;img src=&quot;Design Patterns.jpg&quot; alt=&quot;&amp;quot;Design Patterns&amp;quot;&quot; class=&quot;float-right&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The composite pattern is one of the twenty-three software design patterns introduced in the Gang of Four’s  (GoF) seminal work, &lt;a href=&quot;https://www.amazon.com/gp/product/0201633612/ref=as_li_tl?ie=UTF8&amp;amp;tag=jon100-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0201633612&amp;amp;linkId=ce0a3b2651f5de39016ad1aa1f003b80&quot;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;.  The authors classify the patterns into one of three categories: creational, structural and behavioral.  The composite pattern is a structural pattern, meaning it is a pattern that describes how entities relate to each other with the goal of simplifying the structure of a system.&lt;/p&gt;

&lt;p&gt;The composite pattern describes a group of entities that can be combined into a tree-like structure, where the individual parts have the same interface as the structure as a whole, allowing clients to interact with the parts and the whole uniformly.  This is where the advantage of the composite pattern lies.  By treating the composite and its components uniformly, clients avoid having to discriminate between a leaf node and a branch, reducing complexity and the potential for error.&lt;/p&gt;

&lt;p&gt;Further, by structuring a component as a composite of primitive objects that are recombinable, we get the benefits of code reuse as we are able to leverage existing components to build other composites.  We’ll see this in practice as we get into the code for our rules engine.&lt;/p&gt;

&lt;h2 id=&quot;specification-building-blocks&quot;&gt;Specification Building Blocks&lt;/h2&gt;

&lt;p&gt;So let’s move from the abstract to the concrete and see some code.  Before we start to think about domain-specific rules that we need to implement, we’ll need a few building blocks first.&lt;/p&gt;

&lt;h3 id=&quot;ispecification&quot;&gt;ISpecification&lt;/h3&gt;

&lt;p&gt;First, we need an interface for interacting with the composite specification as a whole, as well as its individual component specifications.  So here’s our &lt;code class=&quot;highlighter-rouge&quot;&gt;ISpecification&lt;/code&gt; interface:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a very simple interface consisting of one method, &lt;code class=&quot;highlighter-rouge&quot;&gt;IsSatisfiedBy(TCandidate candidate)&lt;/code&gt;, which returns true or false depending on whether the given specification is satisfied by the candidate passed to it.&lt;/p&gt;

&lt;p&gt;The type parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;TCandidate&lt;/code&gt; specifies the type of object that the specification will be used to evaluate.  In the case of a composite specification, the type of candidate object passed to the root node will be passed to the child nodes, so the type is expected to be the same for all individual specifications that make up a composite specification.&lt;/p&gt;

&lt;h3 id=&quot;compositespecification&quot;&gt;CompositeSpecification&lt;/h3&gt;

&lt;p&gt;Next, we have an abstract class &lt;code class=&quot;highlighter-rouge&quot;&gt;CompositeSpecification&lt;/code&gt;, which will be the base class for any branch (non-leaf) nodes in our composite specification:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompositeSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_childSpecifications&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddChildSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_childSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IReadOnlyCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_childSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsReadOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The main behavior that &lt;code class=&quot;highlighter-rouge&quot;&gt;CompositeSpecification&lt;/code&gt; implements here is the management of a node’s child specifications.  It handles the addition of a child specification to the composite specification, and it exposes the child specifications as a read-only collection that can be traversed.&lt;/p&gt;

&lt;h3 id=&quot;boolean-specifications&quot;&gt;Boolean Specifications&lt;/h3&gt;

&lt;p&gt;The branches (non-leaf nodes) are specifications that represent Boolean operations that connect 1..n other specifications, and they derive from &lt;code class=&quot;highlighter-rouge&quot;&gt;CompositeSpecification&lt;/code&gt;.  For our initial implementation, we have &lt;strong&gt;AND&lt;/strong&gt; and &lt;strong&gt;OR&lt;/strong&gt; specifications (short-circuited).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AndSpecification&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AndSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_childSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_childSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OrSpecification&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_childSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_childSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, other Boolean operators, such as &lt;strong&gt;NOT&lt;/strong&gt; and &lt;strong&gt;XOR&lt;/strong&gt;, could be implemented without too much difficulty, but these are the only two that I’ve needed so far for my application, and they are sufficient for demonstrating the pattern.&lt;/p&gt;

&lt;h4 id=&quot;unit-testing-the-boolean-specifications&quot;&gt;Unit Testing the Boolean Specifications&lt;/h4&gt;

&lt;p&gt;Before we move on to the domain-specification specifications, let’s talk briefly about unit testing.  One of the attractive characteristics of the specification pattern is the ease with which specifications can be unit-tested due to the clear boundaries around small, individual chunks of logic.&lt;/p&gt;

&lt;p&gt;To assist with unit-testing, I’ve implemented very simple &lt;strong&gt;True&lt;/strong&gt; and &lt;strong&gt;False&lt;/strong&gt; specifications:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrueSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FalseSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCandidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These one-line specifications aren’t useful in application code, but they come in handy when unit-testing the branch (non-leaf) node specifications.  Here’s one of the unit tests for the &lt;code class=&quot;highlighter-rouge&quot;&gt;AndSpecification&lt;/code&gt;, utilizing the &lt;code class=&quot;highlighter-rouge&quot;&gt;TrueSpecification&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy_TwoTrueChildren_True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Arrange&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AndSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddChildSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrueSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddChildSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrueSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;());&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Act&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Assert&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BeTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TrueSpecification&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;FalseSpecification&lt;/code&gt; facilitate the writing of straight-forward unit tests like the one above that zero in on the unit under test (&lt;code class=&quot;highlighter-rouge&quot;&gt;AndSpecification.IsSatisfiedBy(..)&lt;/code&gt; in this case).  (You may be wondering about &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertEvaluationMessage&lt;/code&gt; - it is the type of the candidate object that we are evaluating, which we’ll examine in a bit.)&lt;/p&gt;

&lt;h2 id=&quot;domain-specific-specifications&quot;&gt;Domain-Specific Specifications&lt;/h2&gt;

&lt;p&gt;Now that we have the building blocks needed to build &lt;em&gt;any&lt;/em&gt; specification, we’re ready to look at the things we’ll need to build specifications specific to our domain: stock alerts.  As we transition from discussing the Boolean specifications to talking about domain-specific specifications, our focus is moving from the branch (non-leaf) nodes of the composite specification to the leaf nodes.&lt;/p&gt;

&lt;h3 id=&quot;pricespecification&quot;&gt;PriceSpecification&lt;/h3&gt;

&lt;p&gt;One of the main criteria that our specification will have to test for is, when given a new price quote, whether the new price exceeds a certain level.  For this, we’ll create a &lt;code class=&quot;highlighter-rouge&quot;&gt;PriceSpecification&lt;/code&gt; that is aware of an alert criteria specifying an important price level, and it will return true or false depending on whether a new stock quote breaches that level:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PriceSpecification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlertCriteria&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PriceSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertCriteria&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreviousLastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GreaterThanOrEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreviousLastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreviousLastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LessThanOrEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreviousLastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreviousLastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;alertcriteria&quot;&gt;AlertCriteria&lt;/h4&gt;

&lt;p&gt;This specification has a domain model passed to it at the time it is constructed: &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt;.  We’ll look at just the few properties of &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt; that are relevant to this particular specification for now:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlertCriteria&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// snip&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// snip&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt; specifies the alert &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts/StockAlerts.Core/Enums/CriteriaType.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaType&lt;/code&gt;&lt;/a&gt; that we’re evaluating.  Possible values are &lt;code class=&quot;highlighter-rouge&quot;&gt;Composite&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Price&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DailyPercentageGainLoss&lt;/code&gt;, and there will likely be more.  &lt;code class=&quot;highlighter-rouge&quot;&gt;Operator&lt;/code&gt; specifies the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts/StockAlerts.Core/Enums/CriteriaOperator.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaOperator&lt;/code&gt;&lt;/a&gt; that applies for the particular scenario we’re evaluating.  Finally, if we need to trigger a price alert, we need to know at which level it should be triggered, which is what is specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Level&lt;/code&gt; property.  With these three pieces of data, we have what we need to know to create a specification that represents a price alert for a given stock’s price becomes greater than or equal to $150, for example.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt; domain object will ultimately come from the database, and is a key part of the data model that will make this a data-driven rules engine.  We’ll look at it more closely in bit.&lt;/p&gt;

&lt;h4 id=&quot;alertevaluationmessage&quot;&gt;AlertEvaluationMessage&lt;/h4&gt;

&lt;p&gt;The next piece needed for our &lt;code class=&quot;highlighter-rouge&quot;&gt;PriceSpecification&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertEvaluationMessage&lt;/code&gt;, which is the type of candidate object that our specification is designed to evaluate.  In our example, &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertEvaluationMessage&lt;/code&gt; represents a new price quote (named &lt;code class=&quot;highlighter-rouge&quot;&gt;Message&lt;/code&gt; since in this particular case it’s being pulled off of a message queue).&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlertEvaluationMessage&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlertDefinitionId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PreviousLastPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpenPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The relevant properties here for our &lt;code class=&quot;highlighter-rouge&quot;&gt;PriceSpecification&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;LastPrice&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PreviousLastPrice&lt;/code&gt;, so that we can determine whether a price has crossed a certain price level.&lt;/p&gt;

&lt;h4 id=&quot;issatisfiedbyalertevaluationmessage-candidate&quot;&gt;IsSatisfiedBy(AlertEvaluationMessage candidate)&lt;/h4&gt;

&lt;p&gt;Now that we have the required information, we can evaluate whether the &lt;code class=&quot;highlighter-rouge&quot;&gt;PriceSpecification&lt;/code&gt; for our particular &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt; is satisfied by the candidate &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertEvaluationMessage&lt;/code&gt; object.  &lt;code class=&quot;highlighter-rouge&quot;&gt;IsSatisfiedBy(AlertEvaluationMessage candidate)&lt;/code&gt; is a fairly simple set of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements that perform comparisons between &lt;code class=&quot;highlighter-rouge&quot;&gt;_alertCriteria.Level&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;candidate.LastPrice&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;candidate.PreviousLastPrice&lt;/code&gt; depending on &lt;code class=&quot;highlighter-rouge&quot;&gt;_alertCriteria.Operator&lt;/code&gt; and returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; to indicate whether the price level has been breached.&lt;/p&gt;

&lt;h3 id=&quot;other-domain-specific-specifications&quot;&gt;Other Domain-Specific Specifications&lt;/h3&gt;

&lt;p&gt;I’ve also implemented a &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts/StockAlerts.Domain/Specifications/DailyPercentageGainLossSpecification.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DailyPercentageGainLossSpecification&lt;/code&gt;&lt;/a&gt;, which returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; depending on whether the stock price has exceeded a given percentage gain or loss for the day.  Its logic is very similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PriceSpecification&lt;/code&gt; that we just discussed.&lt;/p&gt;

&lt;p&gt;Other types of specifications that I plan to implement in the future are things like &lt;code class=&quot;highlighter-rouge&quot;&gt;DividendYieldSpecification&lt;/code&gt;, which would return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; when a stock’s dividend yield breaches a certain percentage, or &lt;code class=&quot;highlighter-rouge&quot;&gt;PeRatioSpecification&lt;/code&gt;, which would return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; when a stock’s PE ratio breaches a certain level.&lt;/p&gt;

&lt;p&gt;The sky is the limit in terms of what kinds of specifications we can implement and combine into a composite specification.  The specifications that we build are generic in the sense that the specific parameters (price level, operator, etc…) are provided at runtime, so that our &lt;code class=&quot;highlighter-rouge&quot;&gt;PriceSpecification&lt;/code&gt;, for example, can be re-used in any composite specification that needs to test for a price level breach as part of its logic.&lt;/p&gt;

&lt;p&gt;Hopefully by now it’s becoming a bit clearer how the specification pattern can be used to construct a complex rule like described at the beginning of this post.&lt;/p&gt;

&lt;h2 id=&quot;constructing-the-composite-specification&quot;&gt;Constructing the Composite Specification&lt;/h2&gt;

&lt;p&gt;Now that we have the pieces needed to represent and evaluate a set of criteria, let’s revisit our use case.  Users need to be able to specify their alert criteria at runtime, and the system needs to store these criteria so that it can retrieve them and construct the composite specification and evaluate it on demand when a new stock quote is received.&lt;/p&gt;

&lt;h3 id=&quot;data-model&quot;&gt;Data Model&lt;/h3&gt;

&lt;p&gt;The data model to support this use case consists of two tables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AlertDefinitions
    &lt;ul&gt;
      &lt;li&gt;Contains a record for each user-defined alert.&lt;/li&gt;
      &lt;li&gt;Represents the overall composite specification for an alert for a user for a given stock.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AlertCriteria
    &lt;ul&gt;
      &lt;li&gt;Contains a record for each individual criteria that make up an AlertDefinition.&lt;/li&gt;
      &lt;li&gt;Represents an individual specification.&lt;/li&gt;
      &lt;li&gt;One-to-many relationship back to AlertDefinitions.&lt;/li&gt;
      &lt;li&gt;Zero-to-many relationship back to itself.&lt;/li&gt;
      &lt;li&gt;Because AlertCriteria is a self-referencing table, it can be used to represent any number of nodes in a complex composite specification.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;DataModel.PNG&quot; alt=&quot;Data Model&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;domain-model&quot;&gt;Domain Model&lt;/h3&gt;

&lt;p&gt;Moving up to the domain model, we have &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts/StockAlerts.Domain/Model/AlertDefinition.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts/StockAlerts.Domain/Model/AlertCriteria.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt;&lt;/a&gt; models that are mapped from and correspond with the two tables in the underlying data model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;DomainModel.PNG&quot; alt=&quot;Domain Model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These domain models make up an aggregate, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt; is the aggregate root.  The persistance of the aggregate is controlled via the &lt;code class=&quot;highlighter-rouge&quot;&gt;SaveAsync&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DeleteAsync&lt;/code&gt; methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The domain models contain logic for validating the proper configuration of the composite specification, which is checked at the time the &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt; is saved.  For example…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A composite &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt; can only have certain operators (&lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt;, other Boolean operators).&lt;/li&gt;
  &lt;li&gt;A composite &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt; must have at least one child &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A non-composite &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt; cannot have any children.&lt;/li&gt;
  &lt;li&gt;Etc…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The construction and evaluation of the composite specification is triggered in &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition.EvaluateAsync(AlertEvaluationMessage message)&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EvaluateAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlertDefinitionStatuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastSent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UtcNow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastSent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Alert not already sent today&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertCriteriaSpecificationFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsSatisfiedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;Stock Alert Triggered: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notificationMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;Stock Alert Triggered &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                                          &lt;span class=&quot;s&quot;&gt;$&quot;Notification Name: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                                          &lt;span class=&quot;s&quot;&gt;$&quot;Stock: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                                          &lt;span class=&quot;s&quot;&gt;$&quot;Criteria: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TriggerAlertAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notificationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the culmination of all that we’ve been building.  We’ve now got our composite &lt;code class=&quot;highlighter-rouge&quot;&gt;specification&lt;/code&gt; (created by the &lt;code class=&quot;highlighter-rouge&quot;&gt;_alertCriteriaSpecificationFactory&lt;/code&gt;, which we will visit in a moment) representing the user-defined alert definition, and we evaluate the entire set of rules with our call to &lt;code class=&quot;highlighter-rouge&quot;&gt;specification.IsSatisfiedBy(message)&lt;/code&gt;, which simply returns &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It may seem rather anti-climactic on the surface, but there is a lot of power within the specification and the beauty of the pattern lies in the simplicity of its interface.  The client simply asks the specification, “Does this object satisfy your criteria?”&lt;/p&gt;

&lt;h3 id=&quot;factory&quot;&gt;Factory&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteriaSpecificationFactory&lt;/code&gt; is the final piece of the puzzle that we’ll look at.  It is responsible for the actual construction of the composite specification and its children from the &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt;.  It is an example of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_method_pattern&quot;&gt;factory pattern&lt;/a&gt;, a creational design pattern coined by the Gang of Four.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteriaSpecificationFactory&lt;/code&gt; will create any &lt;code class=&quot;highlighter-rouge&quot;&gt;ISpecification&amp;lt;AlertEvaluationMessage&amp;gt;&lt;/code&gt; for a given &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAlertCriteriaSpecificationFactory&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Though we only publicly expose a single method in the interface for building an &lt;code class=&quot;highlighter-rouge&quot;&gt;ISpecification&lt;/code&gt; from an &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt;, in the implementation of the factory we see that it is also responsible for building the &lt;code class=&quot;highlighter-rouge&quot;&gt;ISpecification&lt;/code&gt;s that make up the composite from individual &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertCriteria&lt;/code&gt; objects.  The factory contains private methods for constructing each type of specification, and it recursively traverses the tree of alert criteria building the various individual specifications to construct the full composite specification for the &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlertCriteriaSpecificationFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAlertCriteriaSpecificationFactory&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_factoryMethods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AlertCriteriaSpecificationFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_factoryMethods&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Composite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateCompositeSpecification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreatePriceSpecification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DailyPercentageGainLoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateDailyPercentageGainLossSpecification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertCriteria&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryMethod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_factoryMethods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateCompositeSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AlertCriteria&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CompositeSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;specification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AndSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;specification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplicationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Operator not supported.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChildrenCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddChildSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreatePriceSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AlertCriteria&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PriceSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertEvaluationMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateDailyPercentageGainLossSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AlertCriteria&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DailyPercentageGainLossSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Whew!&lt;/p&gt;

&lt;p&gt;This was a long post, but I hope it has been a helpful introduction to the specification pattern.  It’s a powerful pattern for modeling and evaluating complex rules that goes a long way towards minimizing complexity when applied to an appropriate use case.&lt;/p&gt;

&lt;p&gt;A composite specification can be constructed at design-time for cases where the rules are known ahead of time.  It simplifies things a bit while still providing all of the benefits of the pattern.  Many use cases fall into this category.&lt;/p&gt;

&lt;p&gt;On the other hand, if the rules aren’t known until runtime (as in our case, where the stock alert criteria are user-defined), the composite specification can be created from a representation of the rules stored as records in a database, resulting in a full-blown data-driven rules engine, as we demonstrated in this post.&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="stock-alerts" /><category term="specification-pattern" /><category term="design-patterns" /><category term="composite-pattern" /><category term="factory-pattern" /><category term="domain-driven-design" /><category term="architecture" /><category term="eric-evans" /><category term="martin-fowler" /><category term="rules-engine" /><category term="c-sharp" /><summary type="html">The specification pattern can be an indispensable tool in the developer's toolbox when faced with the task of determining whether an object meets a certain set of criteria. When coupled with the composite pattern, the composite specification becomes a power tool that can tackle any combination of business rules no matter how complex, all while ensuring maintainability, robustness, and testability. In this post we'll see how the composite specification pattern can be used in a .NET application to build a data-driven rules engine.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.jonblankenship.com//2019/10/04/using-the-specification-pattern-to-build-a-data-driven-rules-engine/DecisionTree.PNG" /></entry><entry><title type="html">Create/Edit Screens, Bindable Layouts, and More</title><link href="https://blog.jonblankenship.com//2019/07/21/create-edit-screens-bindable-layouts-and-more-update-2019-07-21/" rel="alternate" type="text/html" title="Create/Edit Screens, Bindable Layouts, and More" /><published>2019-07-21T02:00:00-05:00</published><updated>2019-07-21T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/07/21/create-edit-screens-bindable-layouts-and-more-update-2019-07-21</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/07/21/create-edit-screens-bindable-layouts-and-more-update-2019-07-21/">&lt;p&gt;Since my &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/09/moving-from-http-triggered-azure-functions-to-web-api-update-2019-07-09/&quot;&gt;last update&lt;/a&gt; I’ve been focused on building the Create Alert Definition screen in the Stock Alerts mobile app project. It’s been slow but steady progress, and I’m happy to report that both the Create Alert Definition and Edit Alert Definition screens are now functional. (Technically they’re both the same screen, but I’ve been treating them separately from a work management perspective.)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For those just tuning in, these &lt;a href=&quot;https://blog.jonblankenship.com/category/side-projects/stock-alerts/&quot;&gt;past posts&lt;/a&gt; will bring you up to speed on the &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/25/working-on-a-new-side-project-in-public/&quot;&gt;project&lt;/a&gt;, the &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/28/stock-alerts-features/&quot;&gt;features&lt;/a&gt; I’m building, the &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/01/stock-alerts-infrastructure/&quot;&gt;infrastructure&lt;/a&gt;, etc…&lt;/p&gt;

&lt;h2 id=&quot;create-alert-definition-screen&quot;&gt;Create Alert Definition Screen&lt;/h2&gt;

&lt;p&gt;The MVP version of the Create Alert Definition screen is fairly simple – you search for and select a stock, enter one or more criteria for the alert, and click Save. I &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/03/stock-alerts-update-2019-07-03/&quot;&gt;talked about&lt;/a&gt; the search functionality a couple of weeks ago, so the next task was to build the alert criteria.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;20190720_101839.gif&quot; alt=&quot;Create Alert Definition Screen&quot; class=&quot;w-25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The API supports complex, multi-level composite criteria, but for this version I’m building a UI that supports just one level of criteria combined with an &lt;strong&gt;AND&lt;/strong&gt; or &lt;strong&gt;OR&lt;/strong&gt; Boolean operator, as demonstrated in the GIF, to keep things simple.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.jonblankenship.com/2019/07/21/create-edit-screens-bindable-layouts-and-more-update-2019-07-21/Alert Criteria Section&quot;&gt;&lt;img src=&quot;CriteriaSection-300x163.png&quot; alt=&quot;C&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;segmentedbuttongroup&quot;&gt;SEGMENTEDBUTTONGROUP&lt;/h3&gt;

&lt;p&gt;To build the criteria section, I just needed a couple of toggle buttons to switch the composite operator between AND and OR, and a control to list &lt;code class=&quot;highlighter-rouge&quot;&gt;0..n&lt;/code&gt; criteria rules.&lt;/p&gt;

&lt;p&gt;For the AND/OR selector, I chose to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentedButtonGroup&lt;/code&gt; control from the &lt;a href=&quot;https://github.com/XAM-Consulting/FreshEssentials&quot;&gt;FreshEssentials&lt;/a&gt; library, which provides a look and feel similar to the iOS segmented control.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;AndOrSelector-300x94.png&quot; alt=&quot;And/Or Selector&quot; class=&quot;w-25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Integrating it into the view was fairly straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xaml&quot;&gt;&amp;lt;freshEssentials:SegmentedButtonGroup OnColor=&quot;{StaticResource DarkGrayColor}&quot; OffColor=&quot;{StaticResource WhiteColor}&quot; 
                                      SelectedIndex=&quot;{Binding SelectedOperatorButtonIndex, Mode=TwoWay}&quot; 
                                      HorizontalOptions=&quot;Center&quot; HeightRequest=&quot;30&quot; WidthRequest=&quot;120&quot; CornerRadius=&quot;10&quot;&amp;gt;
    &amp;lt;freshEssentials:SegmentedButtonGroup.SegmentedButtons&amp;gt;
        &amp;lt;freshEssentials:SegmentedButton Title=&quot;AND&quot;&amp;gt;&amp;lt;/freshEssentials:SegmentedButton&amp;gt;
        &amp;lt;freshEssentials:SegmentedButton Title=&quot;OR&quot;&amp;gt;&amp;lt;/freshEssentials:SegmentedButton&amp;gt;
    &amp;lt;/freshEssentials:SegmentedButtonGroup.SegmentedButtons&amp;gt;
&amp;lt;/freshEssentials:SegmentedButtonGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I bind the &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedIndex&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedOperatorButtonIndex&lt;/code&gt; property on the view model.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectedOperatorButtonIndex&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I considered creating a converter to convert between the &lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaOperator&lt;/code&gt; enum value and its corresponding value, but this does the job and is fine for now.&lt;/p&gt;

&lt;h3 id=&quot;bindable-layouts&quot;&gt;BINDABLE LAYOUTS&lt;/h3&gt;

&lt;p&gt;Working with the individual criteria would require a little more work.&lt;/p&gt;

&lt;p&gt;To support the dynamic adding/removing of criteria, I knew I’d need a control like WPF’s &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol?view=netframework-4.8&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ItemsControl&lt;/code&gt;&lt;/a&gt;, which binds to a collection of items on the data context and renders a view for each item. I would need something similar for Xamarin.Forms.&lt;/p&gt;

&lt;p&gt;I was pleased to learn that Xamarin.Forms now has &lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/layouts/bindable-layouts&quot;&gt;bindable layouts&lt;/a&gt;, which were introduced sometime since the last time I did any Xamarin.Forms work, which was a couple of years ago. Bindable layouts allow the user to bind a layout control ( any class that derives from &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/xamarin.forms.layout-1?view=xamarin-forms&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Layout&lt;/code&gt;&lt;/a&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;StackLayout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Grid&lt;/code&gt;, etc…) to a collection on the data context to control how the layout is populated, using data templates to define how the items are rendered.&lt;/p&gt;

&lt;p&gt;The data binding of bindable layouts is familiar and consistent with other Xamarin.Forms data-bound controls. Let’s see how it works in the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/Views/AlertDefinitions/EditAlertDefinitionPage.xaml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EditAlertDefinitionPage&lt;/code&gt;&lt;/a&gt; view. Here’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackLayout&lt;/code&gt; that contains the list of criteria:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xaml&quot;&gt;&amp;lt;StackLayout BindableLayout.ItemsSource=&quot;{Binding CriteriaCollection}&quot;&amp;gt;
    &amp;lt;BindableLayout.ItemTemplate&amp;gt;
        &amp;lt;DataTemplate&amp;gt;
            &amp;lt;alertDefinitions:CriteriaView BindingContext=&quot;{Binding}&quot;&amp;gt;&amp;lt;/alertDefinitions:CriteriaView&amp;gt;
        &amp;lt;/DataTemplate&amp;gt;
    &amp;lt;/BindableLayout.ItemTemplate&amp;gt;
&amp;lt;/StackLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I only have one &lt;code class=&quot;highlighter-rouge&quot;&gt;DataTemplate&lt;/code&gt; defined, but the ability to leverage a &lt;code class=&quot;highlighter-rouge&quot;&gt;DataTemplateSelector&lt;/code&gt; to render different &lt;code class=&quot;highlighter-rouge&quot;&gt;DataTemplate&lt;/code&gt;s will likely come in handy in the future as I add more types of criteria.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaCollection&lt;/code&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableCollection&lt;/code&gt; (observable, since the UI needs to update when the user adds or removes a new criteria) of &lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaViewModel&lt;/code&gt;s on the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/ViewModels/AlertDefinitions/EditAlertDefinitionPageViewModel.cs&quot;&gt;view model&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObservableCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaCollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObservableCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/Views/AlertDefinitions/CriteriaView.xaml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaView&lt;/code&gt;&lt;/a&gt; is a custom view that simply has a single-row &lt;code class=&quot;highlighter-rouge&quot;&gt;Grid&lt;/code&gt; to hold the individual controls for each criteria.&lt;/p&gt;

&lt;h3 id=&quot;adding-and-removing-criteria&quot;&gt;ADDING AND REMOVING CRITERIA&lt;/h3&gt;

&lt;p&gt;The adding and removing of the criteria is handled by methods on the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/ViewModels/AlertDefinitions/EditAlertDefinitionPageViewModel.cs&quot;&gt;view model&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddCriteriaCommand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecuteAddCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAddCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;AddCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CriteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AlertCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NavigationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CriteriaViewModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CriteriaCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CriteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CriteriaCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;criteriaViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the button to remove a criteria is on the individual criteria views, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ICommand&lt;/code&gt; for removal is located on the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/ViewModels/AlertDefinitions/CriteriaViewModel.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaViewModel&lt;/code&gt;&lt;/a&gt;, which raises an event to alert the parent &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/ViewModels/AlertDefinitions/EditAlertDefinitionPageViewModel.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EditAlertDefinitionPageViewModel&lt;/code&gt;&lt;/a&gt; to remove the specific criteria from its collection:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoveCriteriaCommand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecuteRemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteRemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RemoveCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I won’t go into too much more detail regarding the specifics of managing the criteria. It’s mostly typical MVVM.&lt;/p&gt;

&lt;h3 id=&quot;saving-the-alert-definition&quot;&gt;SAVING THE ALERT DEFINITION&lt;/h3&gt;

&lt;p&gt;I added simple validation to the view models that we’ve been looking at that fires when the &lt;code class=&quot;highlighter-rouge&quot;&gt;SaveCommand&lt;/code&gt; is executed. If any validation on the alert definition or a child criteria fails, then I just display a red message at the bottom of the screen and prevent the save from occurring. It’s very basic, but good enough for now.&lt;/p&gt;

&lt;p&gt;The act of saving the alert definition by executing a POST request to the Stock Alerts API is handled by the &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts.App/StockAlerts.App/Services/AlertDefinitions/AlertDefinitionsService.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinitionsService&lt;/code&gt;&lt;/a&gt;, which is a wrapper around an &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt; for communicating with the alert-definition-related endpoints on the API.&lt;/p&gt;

&lt;h2 id=&quot;edit-alert-definition&quot;&gt;Edit Alert Definition&lt;/h2&gt;

&lt;p&gt;Once I had the Create Alert Definition screen working and creating alert definitions, making the modifications to enable the editing and saving of existing alert definitions was fairly straightforward.&lt;/p&gt;

&lt;p&gt;Here’s what it took:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make alert definitions on the &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertsPageViewModel&lt;/code&gt; selectable, and bind the &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedItem&lt;/code&gt; to property &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedAlertDefinition&lt;/code&gt; on the view model, which navigates to the &lt;code class=&quot;highlighter-rouge&quot;&gt;EditAlertDefinitionPage&lt;/code&gt; passing the selected &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDefinition&lt;/code&gt; as a navigation parameter (I’m using &lt;a href=&quot;https://prismlibrary.github.io/index.html&quot;&gt;Prism’s&lt;/a&gt; &lt;a href=&quot;https://prismlibrary.github.io/docs/xamarin-forms/navigation/navigation-basics.html&quot;&gt;navigation service&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Modify &lt;code class=&quot;highlighter-rouge&quot;&gt;EditAlertDefinitionPageViewModel.OnNavigatedTo(..)&lt;/code&gt; to check for a &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectedAlertDefinition&lt;/code&gt; navigation parameter, and if found, call private &lt;code class=&quot;highlighter-rouge&quot;&gt;InitializeForEdit()&lt;/code&gt; to set various properties appropriately for edit rather than create mode.&lt;/li&gt;
  &lt;li&gt;Make minor adjustments to &lt;code class=&quot;highlighter-rouge&quot;&gt;CriteriaViewModel&lt;/code&gt; appropriate for edit mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;20190720_163746.gif&quot; alt=&quot;Edit Alert Definition Screen&quot; class=&quot;w-25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At some point I’ll fix the orange color of the selected item in the list view and the sizing bug of the “remove” icon on individual criteria, but not today. We’re functioning, and that’s good enough for now.&lt;/p&gt;

&lt;h2 id=&quot;other-ui-stuff&quot;&gt;Other UI Stuff&lt;/h2&gt;

&lt;p&gt;I also spent some time this week tweaking the colors and layouts of some of the app’s screens, added a loading/busy indicator to several screens, and made a few other minor UI adjustments.&lt;/p&gt;

&lt;p&gt;I’m trying to keep the UI simple and clean.&lt;/p&gt;

&lt;p&gt;I’m not a designer, and I’m much stronger on API and backend development, but I do the best I can with the pixels.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Well that’s all I’ve got for this week! This coming week I’ll continue to work on the other screens in the app. It shouldn’t take too long to get the app to MVP state.&lt;/p&gt;

&lt;p&gt;I’m also working on a post about how I build the criteria rules evaluation engine for Stock Alerts using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Specification_pattern&quot;&gt;specification pattern&lt;/a&gt;, so keep an eye out for that in the next week or two.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="bindable-layouts" /><category term="freshessentials" /><category term="icommand" /><category term="mvvm" /><category term="prism" /><category term="segmentedbuttongroup" /><category term="stock-alerts-update" /><category term="view" /><category term="viewmodel" /><category term="xamarin.forms" /><summary type="html">Since my last update I’ve been focused on building the Create Alert Definition screen in the Stock Alerts mobile app project. It’s been slow but steady progress, and I’m happy to report that both the Create Alert Definition and Edit Alert Definition screens are now functional. (Technically they’re both the same screen, but I’ve been treating them separately from a work management perspective.)</summary></entry><entry><title type="html">Moving from HTTP-Triggered Azure Functions to Web API</title><link href="https://blog.jonblankenship.com//2019/07/09/moving-from-http-triggered-azure-functions-to-web-api-update-2019-07-09/" rel="alternate" type="text/html" title="Moving from HTTP-Triggered Azure Functions to Web API" /><published>2019-07-09T02:00:00-05:00</published><updated>2019-07-09T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/07/09/moving-from-http-triggered-azure-functions-to-web-api-update-2019-07-09</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/07/09/moving-from-http-triggered-azure-functions-to-web-api-update-2019-07-09/">&lt;p&gt;This past weekend was a long one due to the Fourth of July, and despite a weekend filled with cookouts, swimming, fireworks, an anniversary date night, and a trip to St. Louis, I was able to knock off an important task on my &lt;a href=&quot;https://blog.jonblankenship.com/category/side-projects/stock-alerts/&quot;&gt;side project&lt;/a&gt;‘s &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/TODO.md&quot;&gt;TODO List&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;refactoring-http-triggered-azure-functions-into-a-web-api-service&quot;&gt;Refactoring HTTP-Triggered Azure Functions into a Web API Service&lt;/h2&gt;

&lt;p&gt;When I started work on Stock Alerts, I began with the &lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions/&quot;&gt;Azure Functions&lt;/a&gt; for retrieving quotes and evaluating alert definitions, because they were the most interesting pieces to me.&lt;/p&gt;

&lt;p&gt;I then started thinking about the API endpoints that I’d need to support a mobile client. I figured I wouldn’t need too many endpoints to support the very minimal functionality that I was aiming to implement for MVP, and I already had the Azure Functions project, so I figured I’d just stand up a few &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook&quot;&gt;HTTP-triggered&lt;/a&gt; functions for my API. After all, I could always refactor them into their own proper web API project later.&lt;/p&gt;

&lt;p&gt;It was midway through implementing authentication that I realized that rather than continuing to try to fit the endpoints that I needed into Azure Functions, it made sense to move the HTTP-triggered functions into their own web API project with a separate app service in Azure sooner rather than later.&lt;/p&gt;

&lt;p&gt;So that’s what I did.&lt;/p&gt;

&lt;p&gt;I performed the refactor Thursday/Friday, and fiddled with the build and release pipelines in Azure DevOps in my free moments on Friday/Saturday. Monday morning I switched the app to use the new API.&lt;/p&gt;

&lt;p&gt;Thankfully the refactoring of the code was fairly simple because my functions, much like good controller methods, were thin – they simply received the HTTP request, deserialized it, performed any necessary request-level validation, and delegated processing to the domain layer which lives in a separate assembly. The controllers in the Web API project that I created ended up being very similar.&lt;/p&gt;

&lt;p&gt;I’m now closer to the MVP infrastructure that I &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/01/stock-alerts-infrastructure/&quot;&gt;mentioned&lt;/a&gt; a week ago, depicted below (I’m just missing &lt;code class=&quot;highlighter-rouge&quot;&gt;StockAlerts.WebApp&lt;/code&gt; now):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-MVP-Infrastructure-Resources.png&quot; alt=&quot;Stock Alerts MVP Infrastructure Resources&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I love the feeling of checking items off of my TODO list.&lt;/p&gt;

&lt;h2 id=&quot;why-i-chose-web-api-over-http-triggered-azure-functions&quot;&gt;Why I Chose Web API Over HTTP-Triggered Azure Functions&lt;/h2&gt;

&lt;p&gt;So why did I choose to move my API methods from my Functions project to their own Web API project and service?&lt;/p&gt;

&lt;p&gt;A few key reasons: 1. Inability to configure middleware for Azure Functions 2. Prefer controller methods over Azure Functions 3. API usage patterns&lt;/p&gt;

&lt;p&gt;Let’s talk about these one-by-one…&lt;/p&gt;

&lt;h3 id=&quot;aspnet-core-middleware&quot;&gt;ASP.NET CORE MIDDLEWARE&lt;/h3&gt;

&lt;p&gt;ASP.NET Core gives the developer the ability to plug in logic into the request/response pipeline. This logic is referred to as middleware. &lt;a href=&quot;https://twitter.com/andrewlocknet&quot;&gt;Andrew Lock&lt;/a&gt; has a great &lt;a href=&quot;https://andrewlock.net/asp-net-core-in-action-what-is-middleware/&quot;&gt;post&lt;/a&gt; on what it is and how it works in an ASP.NET Core web app.&lt;/p&gt;

&lt;p&gt;ASP.NET Core has default middleware that it executes during the normal course of processing a request and response, but it also allows the developer to configure at startup what additional middleware should execute with each request, including custom middleware. Middleware is generally used for performing cross-cutting tasks – things like logging, handling exceptions, rendering views, and performing authentication, to name a few.&lt;/p&gt;

&lt;p&gt;Early in my adventures into Azure Functions I learned that the developer doesn’t have the ability to configure the middleware that executes during an HTTP-triggered function invocation. Sure, some folks have rolled their own middleware pattern in Azure Functions (like &lt;a href=&quot;https://dasith.me/2018/01/20/using-azure-functions-httptrigger-as-web-api/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@emanuelcasco/implement-middleware-pattern-in-azure-functions-d8e9f94626a5&quot;&gt;here&lt;/a&gt;), but I didn’t want to invest that much effort into building something that an ASP.NET Core Web API gives me for free.&lt;/p&gt;

&lt;p&gt;My custom middleware needs aren’t too many: for a typical web API I add custom error-handling middleware and enable authentication middleware.&lt;/p&gt;

&lt;p&gt;Though I was able to implement workarounds to accomplish these tasks to work in my functions, they weren’t nearly as clean as accomplishing the same thing with middleware in an ASP.NET Core Web API.&lt;/p&gt;

&lt;h4 id=&quot;error-handling&quot;&gt;&lt;em&gt;Error Handling&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;My preferred approach to handling exceptions on recent Web API projects has been to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt; class that catches any unhandled exception during the processing of the request and turns it into the appropriate HTTP response. The code can be found &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/StockAlerts/StockAlerts.Api/Middleware/ErrorHandlingMiddleware.cs&quot;&gt;here&lt;/a&gt;. Adding it to the pipeline is as simple as one line in &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorHandlingMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To accomplish similar functionality in my Azure Functions required an additional Nuget package (&lt;a href=&quot;https://www.nuget.org/packages/PostSharp/&quot;&gt;PostSharp&lt;/a&gt;), a custom attribute, and a &lt;code class=&quot;highlighter-rouge&quot;&gt;[HandleExceptions]&lt;/code&gt; on top of all of my functions. Not terrible, but I’d rather not have the extra package and have to remember to manually decorate my functions to get error-handling.&lt;/p&gt;

&lt;h4 id=&quot;authenticationauthorization&quot;&gt;&lt;em&gt;Authentication/Authorization&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;To turn on token-based authentication/authorization for an ASP.NET Core Web API endpoint, you must configure the authentication, JWT bearer, and authorization options in &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt;, add the authentication middleware with &lt;code class=&quot;highlighter-rouge&quot;&gt;app.UseAuthentication();&lt;/code&gt;, and decorate your controller methods with the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Authorize]&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;To implement token-based authentication/authorization on my Azure Functions, there wasn’t an easy way for me to simply decorate a function with an &lt;code class=&quot;highlighter-rouge&quot;&gt;[Authorize]&lt;/code&gt; attribute and let the framework make sure that the user could invoke the function. Instead, for each function I had to use &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizationLevel.Anonymous&lt;/code&gt; and manually check for a valid &lt;code class=&quot;highlighter-rouge&quot;&gt;ClaimsPrincipal&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;return new UnauthorizedResult()&lt;/code&gt; if there wasn’t one.&lt;/p&gt;

&lt;p&gt;It worked, but it wasn’t pretty.&lt;/p&gt;

&lt;p&gt;Beyond that, I had trouble getting it to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;Token-Expired&lt;/code&gt; header on responses when the auth token has expired. After switching over to Web API, this just works with the configuration I have in place.&lt;/p&gt;

&lt;h3 id=&quot;prefer-controllers-over-functions&quot;&gt;PREFER CONTROLLERS OVER FUNCTIONS&lt;/h3&gt;

&lt;p&gt;As I began to add multiple HTTP-triggered functions that manipulated the same server resource, I grouped them into a single file per resource, similar to how controllers are often organized. But even though the methods were grouped like controllers, there were significant differences at the code level that cause me to prefer the controller implementations over the Azure Functions implementations.&lt;/p&gt;

&lt;p&gt;Let’s compare the two side-by-side…&lt;/p&gt;

&lt;p&gt;Here’s an Azure Function for getting an alert definition by ID:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GetAlertDefinition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleExceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAlertDefinitionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpTrigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthorizationLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Anonymous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alert-definitions/{alertDefinitionId}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;claimsPrincipal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAuthenticatedPrincipal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;claimsPrincipal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnauthorizedResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertDefinitionsService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAlertDefinitionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;claimsPrincipal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GuardIsAuthorizedForAppUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OkObjectResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s the analogous controller method for getting an alert definition by ID:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{alertDefinitionId}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_alertDefinitionsService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAlertDefinitionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinitionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GuardIsAuthorizedForAppUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OkObjectResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Observations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The controller method is shorter.&lt;/li&gt;
  &lt;li&gt;The controller method is able to accept ID parameters as GUIDs, avoiding manual conversion.&lt;/li&gt;
  &lt;li&gt;The controller method declares the HTTP verb and route more cleanly (in my opinion) as method attributes rather than a parameter attribute.&lt;/li&gt;
  &lt;li&gt;Because I’ve decorated the controller with &lt;code class=&quot;highlighter-rouge&quot;&gt;[Authorize]&lt;/code&gt;, the controller method avoids the manual authorization logic.&lt;/li&gt;
  &lt;li&gt;Because I’m using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorHandlingMiddleware&lt;/code&gt;, the controller method avoids the extra &lt;code class=&quot;highlighter-rouge&quot;&gt;[HandleExceptions]&lt;/code&gt; attribute.&lt;/li&gt;
  &lt;li&gt;Not illustrated in this example, but the controller method accepts request bodies as entities, avoiding having to manually deserialize the request body from the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpRequest&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From a purely code aesthetics perspective, I just prefer controller methods over HTTP-triggered functions.&lt;/p&gt;

&lt;h3 id=&quot;api-usage-pattern&quot;&gt;API USAGE PATTERN&lt;/h3&gt;

&lt;p&gt;I expect the usage pattern of my API to be fairly uniform across the available endpoints and the traffic to ebb and flow predictably with the amount of users using the mobile app. I don’t expect large spikes in traffic to specific endpoints where I would need to be able to scale individual endpoints; if there are large spikes due to a sudden increase in the number of users, I’ll want to scale the whole web API service.&lt;/p&gt;

&lt;p&gt;While HTTP-triggered Azure Functions may be the right choice for other use cases, the anticipated usage pattern of the Stock Alerts API aligns much more closely with a Web API service.&lt;/p&gt;

&lt;p&gt;I’m still using Azure Functions for pulling stock quotes, evaluating alert definitions, and sending out notifications. Azure Functions are well-suited for these use cases, for the reasons I described &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/01/stock-alerts-infrastructure/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;With this change behind me, I’m ready to continue moving forward working on the mobile app. My mornings the rest of this week will be focused on building the Create Alert Definition screen.&lt;/p&gt;

&lt;p&gt;Here’s the repository for the project if you’d like to follow along: https://github.com/jonblankenship/stock-alerts.&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="asp-net-core" /><category term="authentication" /><category term="authorization" /><category term="azure-functions" /><category term="controllers" /><category term="error-handling" /><category term="http-triggered-function" /><category term="middleware" /><category term="side-project" /><category term="stock-alerts" /><category term="stock-alerts" /><category term="web-api" /><summary type="html">This past weekend was a long one due to the Fourth of July, and despite a weekend filled with cookouts, swimming, fireworks, an anniversary date night, and a trip to St. Louis, I was able to knock off an important task on my side project‘s TODO List.</summary></entry><entry><title type="html">Stock Alerts Update</title><link href="https://blog.jonblankenship.com//2019/07/03/stock-alerts-update-2019-07-03/" rel="alternate" type="text/html" title="Stock Alerts Update" /><published>2019-07-03T02:00:00-05:00</published><updated>2019-07-03T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/07/03/stock-alerts-update-2019-07-03</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/07/03/stock-alerts-update-2019-07-03/">&lt;p&gt;I’d been meaning to get this update out over the weekend, but a stomach bug visited our house and threw off my schedule. I’d like to get these updates out about once a week going forward, but since this is a side project and I’m working on it for fun in my off hours, I’m not going to sweat it too much.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Also, as I mentioned in my &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/25/working-on-a-new-side-project-in-public/&quot;&gt;first post&lt;/a&gt;, these updates will be pretty informal and unpolished. I just want to talk in detail about some of the things I did in the past week on the project, and what I plan to do in the coming week.&lt;/p&gt;

&lt;h2 id=&quot;last-week&quot;&gt;Last Week&lt;/h2&gt;

&lt;h3 id=&quot;writing&quot;&gt;WRITING&lt;/h3&gt;

&lt;p&gt;With my announcement last weekend that I’ll be building Stock Alerts in public, I was compelled to write a few extra posts to lay some of the groundwork for project. I wrote the &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/25/working-on-a-new-side-project-in-public/&quot;&gt;introductory post&lt;/a&gt;, spoke about &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/28/stock-alerts-features/&quot;&gt;the features&lt;/a&gt;, and laid out &lt;a href=&quot;https://blog.jonblankenship.com/2019/07/01/stock-alerts-infrastructure/&quot;&gt;the infrastructure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Naturally, this took some of my time away from development, but I think it was time well spent.&lt;/p&gt;

&lt;p&gt;I have other posts that I want to write in the future to cover some of the work I’ve already done (particularly in the API), and I’ll try to work those in in the coming weeks without sacrificing too much dev time.&lt;/p&gt;

&lt;h3 id=&quot;create-alert-definition--stock-search&quot;&gt;CREATE ALERT DEFINITION – STOCK SEARCH&lt;/h3&gt;

&lt;p&gt;I’ve been working on the Create Alert Definition screen in the Stock Alerts mobile app. This is where the user defines an alert, including selecting the stock and defining the alert criteria. Specifically, I was focused on the stock selection functionality last week (we’ll talk more about building the alert criteria in a couple weeks).&lt;/p&gt;

&lt;p&gt;Here’s a wireframe for these screens:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-Create-Alert-Definition-screen-wireframes-768x360.png&quot; alt=&quot;Stock Alerts Create Alert Definition screen wireframes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I want the stock search feature to function like a typeahead search, allowing the user to type as much or as little of the stock symbol or company name as desired, and when they pause, the system retrieves the search results.&lt;/p&gt;

&lt;p&gt;I already had an API endpoint for finding stocks based on a search string; I just needed to add &lt;code class=&quot;highlighter-rouge&quot;&gt;CancellationToken&lt;/code&gt; support, which was as simple as adding it to the Azure function signature and plumbing it down to the data access layer:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FindStocks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleExceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindStocksAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpTrigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthorizationLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Anonymous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;stocks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Implementing search on the mobile app side took a bit more work…&lt;/p&gt;

&lt;p&gt;Thinking about this from an implementation perspective, my &lt;code class=&quot;highlighter-rouge&quot;&gt;StockSearchPageViewModel&lt;/code&gt; needs to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchString&lt;/code&gt; property that receives the input from the textbox, waits a second, and if there’s no additional input, execute the web request to get the search results from the API, which will populate a collection of results on the view model to which the view is bound. If additional input is received from the user while the web request is executing, we need to cancel it and issue a new request.&lt;/p&gt;

&lt;p&gt;I can’t (shouldn’t) implement all of this in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchString&lt;/code&gt; property setter, because you can’t (and shouldn’t want to) make a property setter async. Property setters should be fast and non-blocking. And yet I want to be able to simply bind the &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt; property of my search box to a property on my view model.&lt;/p&gt;

&lt;p&gt;I ended up using &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&lt;/code&gt; from &lt;a href=&quot;https://blog.stephencleary.com/&quot;&gt;Stephen Cleary’s&lt;/a&gt; &lt;a href=&quot;https://www.nuget.org/packages/Nito.Mvvm.Async/&quot;&gt;Nito.Mvvm.Async&lt;/a&gt; library, which contains helpers for working with async methods in MVVM. &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&lt;/code&gt; is “essentially an &lt;code class=&quot;highlighter-rouge&quot;&gt;INotifyPropertyChanged&lt;/code&gt; wrapper for &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;,” as Stephen writes in &lt;a href=&quot;https://stackoverflow.com/a/20953623/9688659&quot;&gt;this SO answer&lt;/a&gt;, which helped me quite a bit (the answer refers to &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTaskCompletion&lt;/code&gt;, which was replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;So here’s my &lt;code class=&quot;highlighter-rouge&quot;&gt;StockSearchPageViewModel&lt;/code&gt; implementation:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StockSearchPageViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModelBase&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IStocksService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stocksService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationTokenSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StockSearchPageViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IStocksService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stocksService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;INavigationService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_stocksService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stocksService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stocksService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_searchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SearchString&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_searchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_searchString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSearchCancellationTokenSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSearchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Stocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SearchStocksAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;RaisePropertyChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stocks&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_stocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;RaisePropertyChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectedStock&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_stock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationParams&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NavigationParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;navigationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NavigationParameterKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SelectedStock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NavigationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GoBackAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SearchStocksAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationTokenSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsCancellationRequested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stocksService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindStocksAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;searchCancellationTokenSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_searchCancellationTokenSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The view model creates and manages the cancellation token source, and cancels it when necessary, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchString&lt;/code&gt; property setter. This is also where we create the &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&lt;/code&gt;, passing it a delegate for the &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchStocksAsync(..)&lt;/code&gt; method, which delays one second and calls the search API. The results of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SearchStocksAsync(..)&lt;/code&gt; method call are exposed as &lt;code class=&quot;highlighter-rouge&quot;&gt;NotifyTask&amp;lt;List&amp;lt;Stock&amp;gt;&amp;gt;&lt;/code&gt; by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Stocks&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;In my &lt;code class=&quot;highlighter-rouge&quot;&gt;StockSearchPage&lt;/code&gt; view, I can simply bind to the properties, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xaml&quot;&gt;&amp;lt;SearchBar Grid.Row=&quot;1&quot; Placeholder=&quot;Start typing ticker or company name&quot; Text=&quot;{Binding SearchString, Mode=TwoWay}&quot;&amp;gt;&amp;lt;/SearchBar&amp;gt;
&amp;lt;ListView Grid.Row=&quot;2&quot; ItemsSource=&quot;{Binding Stocks.Result}&quot; SelectedItem=&quot;{Binding SelectedStock}&quot;&amp;gt;
    &amp;lt;!--snip--&amp;gt;
&amp;lt;/ListView&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and with that, the typeahead stock search seems to be working pretty well.&lt;/p&gt;

&lt;h5 id=&quot;httpclientfactory&quot;&gt;HTTPCLIENTFACTORY&lt;/h5&gt;

&lt;p&gt;ASP.Net Core 2.1 introduced &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt;, which solves some of the problems developers run into when they create too many &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;s in their projects. Steven Gordon has a nice write-up on &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; and the problems it attempts to solve &lt;a href=&quot;https://www.stevejgordon.co.uk/introduction-to-httpclientfactory-aspnetcore&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The syntax to configure clients using &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; is straightforward. In your ASP.NET Core Startup.cs:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Apis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.someapi.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultRequestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, since Xamarin.Forms projects target .NET Standard, we can’t use any of the .NET Core goodies like &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt;. I wanted a similar pattern for configuring and creating my &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;s in the mobile app, so I took some inspiration from &lt;a href=&quot;https://github.com/aspnet/Extensions/tree/master/src/HttpClientFactory/Http/src&quot;&gt;here&lt;/a&gt; and created my own poor man’s &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s my &lt;code class=&quot;highlighter-rouge&quot;&gt;IHttpClientFactory&lt;/code&gt; interface:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IHttpClientFactory&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s my fairly naïve, yet adequate implementation:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpClientFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHttpClientFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDisposable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; must be provided.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;A client with the name &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; has already been added.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;A client by the name of &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; has not yet been registered.  Call &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; first.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the registration of the factory with a single client in my App.xaml.cs:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;IHttpClientFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClientFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClientFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;httpClientFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MiscConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StockAlertsApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MiscConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StockAlertsApiBaseUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultRequestHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MediaTypeWithQualityHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;containerRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RegisterInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpClientFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives me a nice way to create and manage my &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;s in my Xamarin.Forms project, and it will be easy to drop in the real &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; if it ever becomes available for Xamarin.Forms projects.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Last week’s activities also included implementing a web service client base class for handling common tasks when communicating with the API, storing access and refresh tokens on the client, and working out my unauthorized/refresh token flow, but those are topics for another post. This one’s long enough.&lt;/p&gt;

&lt;h2 id=&quot;this-week&quot;&gt;This Week&lt;/h2&gt;

&lt;p&gt;This week’s already about half over, and we’ve got the 4th of July coming up. I plan to continue working on the Create Alert Definition screen, and perhaps by the next time I write I’ll have the functionality for building the alert criteria and saving the alert definition working – we’ll see.&lt;/p&gt;

&lt;p&gt;Here’s the repository for the project if you’d like to follow along: https://github.com/jonblankenship/stock-alerts.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and Happy Fourth of July!&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="asp-net-core" /><category term="async-await" /><category term="cancellation-token" /><category term="httpclient" /><category term="httpclientfactory" /><category term="inotifypropertychanged" /><category term="mvvm" /><category term="notifytask" /><category term="stock-alerts" /><category term="stock-alerts-update" /><category term="xamarin.forms" /><summary type="html">I’d been meaning to get this update out over the weekend, but a stomach bug visited our house and threw off my schedule. I’d like to get these updates out about once a week going forward, but since this is a side project and I’m working on it for fun in my off hours, I’m not going to sweat it too much.</summary></entry><entry><title type="html">Stock Alerts Infrastructure</title><link href="https://blog.jonblankenship.com//2019/07/01/stock-alerts-infrastructure/" rel="alternate" type="text/html" title="Stock Alerts Infrastructure" /><published>2019-07-01T02:00:00-05:00</published><updated>2019-07-01T02:00:00-05:00</updated><id>https://blog.jonblankenship.com//2019/07/01/stock-alerts-infrastructure</id><content type="html" xml:base="https://blog.jonblankenship.com//2019/07/01/stock-alerts-infrastructure/">&lt;p&gt;We’ve &lt;a href=&quot;https://blog.jonblankenship.com/2019/06/28/stock-alerts-features/&quot;&gt;talked about the features&lt;/a&gt; that we’ll be implementing in Stock Alerts. Today we’ll look at the infrastructure that will be needed to support those features.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I’ve been working in &lt;a href=&quot;https://azure.microsoft.com/en-us/&quot;&gt;Azure&lt;/a&gt; for several years now, both in my work life and on side projects. Being a primarily .NET developer, it makes sense that Azure is my preferred cloud. One of these days I will probably check out AWS, but for this project we’ll be hosting our backend services in Azure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Microsoft-Azure-300x66.png&quot; alt=&quot;Microsoft Azure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;more-than-just-crud&quot;&gt;More Than Just CRUD&lt;/h2&gt;

&lt;p&gt;When deciding what to build for this project, I wanted to do something that was a bit more than just a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; app that consists of an app talking to a web service talking to a database. Stock Alerts will need to continuously monitor the current prices of all stocks for which there are active alert definitions and evaluate whether the alert should be triggered, so we’ll need a process that runs on a regular basis to perform that work. Further, when the process detects that an alert should be triggered, it needs to send out notifications on the user’s preferred channel(s).&lt;/p&gt;

&lt;p&gt;For this processing, we’ll use a combination of &lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions/&quot;&gt;Azure Functions&lt;/a&gt; and &lt;a href=&quot;https://azure.microsoft.com/en-us/services/service-bus/&quot;&gt;Service Bus&lt;/a&gt; queues.&lt;/p&gt;

&lt;p&gt;Here’s a sequence diagram depicting the retrieving of quotes, evaluation of alert definitions, and sending of notifications:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-Notification-Sequence-Diagram-768x327.png&quot; alt=&quot;Stock Alerts Notification Sequence Diagram&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;alert-definition-evaluation&quot;&gt;ALERT DEFINITION EVALUATION&lt;/h3&gt;

&lt;p&gt;The evaluation of the active alert definitions will have a predictable load. The system will query the stock data provider on a defined time interval for the distinct set of stocks for which there are active alerts and iterate through the alert definitions and evaluate them against the latest data received from the data provider for that stock.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-timer&quot;&gt;timer-triggered Azure Function&lt;/a&gt;, which is essentially a CRON job running in Azure, will work nicely for periodically pulling new stock data. Initially, there will be a single function instance to pull the data, but this work can be partitioned out to multiple function instances if/when the need arises. It will then enqueue a message on a service bus queue (alertprocessingqueue) for each active alert indicating that there’s new data and the alert needs to be evaluated.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-service-bus&quot;&gt;service bus queue-triggered function&lt;/a&gt; (EvaluateAlert) will receive the service bus message and perform the evaluation for a single alert definition.&lt;/p&gt;

&lt;h3 id=&quot;sending-notifications&quot;&gt;SENDING NOTIFICATIONS&lt;/h3&gt;

&lt;p&gt;The actual notification of users, on the other hand, will likely be characterized by periods of low activity with occasional spikes of high activity. Imagine a very popular stock like AAPL receiving an earnings surprise and opening 5% higher – several alert definitions could be triggered at once and notifications will need to be sent immediately.&lt;/p&gt;

&lt;p&gt;Azure Functions will help us with this use case as well – we’ll enqueue notification messages on service bus queues (pushnotificationqueue, for example) when alerts are triggered and service bus queue-triggered functions (SendPushNotification, for example) will respond and send out the notifications. We’ll have a queue for each delivery channel (push, e-mail, SMS), and a function for each as well.&lt;/p&gt;

&lt;p&gt;When AAPL spikes and 500 alerts are triggered, 500 messages will be enqueued on service bus queues (assuming each user only has one delivery channel) and 500 functions will be invoked to deliver those notifications.&lt;/p&gt;

&lt;h2 id=&quot;the-infrastructure&quot;&gt;The Infrastructure&lt;/h2&gt;

&lt;p&gt;So what Azure resources will be required to support the Stock Alerts features? Here’s a diagram of what we’ll need for the MVP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-MVP-Infrastructure-Resources.png&quot; alt=&quot;Stock Alerts MVP Infrastructure Resources&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve got an &lt;a href=&quot;https://azure.microsoft.com/en-us/services/sql-database/&quot;&gt;Azure SQL&lt;/a&gt; database to store our users and their preferences, alert definitions and criteria, and stocks and their latest data.&lt;/p&gt;

&lt;p&gt;We’ve already talked about the service bus queues, which are used for communicating between the Azure Functions, and we’ve already talked about the Azure Functions as well.&lt;/p&gt;

&lt;p&gt;The Stock Alerts API will be an ASP.NET Core Web API service running in Azure, and it will expose endpoints to handle the user and alert definition maintenance as well as authentication.&lt;/p&gt;

&lt;p&gt;The Stock Alerts web app, though depicted on the diagram, will actually be implemented post-MVP.&lt;/p&gt;

&lt;h3 id=&quot;current-state&quot;&gt;CURRENT STATE&lt;/h3&gt;

&lt;p&gt;The above shows the infrastructure as I plan to have it at launch. Below is the current infrastructure I have deployed in Azure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Stock-Alerts-Current-Infrastructure-Resources.png&quot; alt=&quot;Stock Alerts Current Infrastructure Resources&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of the API endpoints are currently implemented as &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook&quot;&gt;HTTP-triggered Azure functions&lt;/a&gt;. I did this because I already had the StockAlerts.Functions project, and I didn’t think there’d be that many HTTP endpoints. As I started implementing the authentication endpoints and I ran into some of the limitations of Azure Functions HTTP endpoints (i.e., you can’t inject logic into the pipeline as you can into the ASP.NET Core middleware for a full-fledged Web API), I increasingly felt like the API endpoints deserved their own project and app service. It’s on my &lt;a href=&quot;https://github.com/jonblankenship/stock-alerts/blob/master/TODO.md&quot;&gt;TODO list&lt;/a&gt; to move these into their own project and service.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;I think the most interesting part of the Stock Alerts infrastructure is the use of Azure Functions and Service Bus queues to evaluate alert definitions and send notifications. Azure Functions make sense for these processes because they can be triggered by schedule or service bus queue message (among other methods), and they are easily scaled. Service bus queues are appropriate for the communication between functions because they are highly available, reliable, and fast.&lt;/p&gt;

&lt;p&gt;Though one of the key value props of serverless computing is automatic scaling, I don’t have practical experience with scaling Azure Functions during periods of high load. I’ll log and monitor timings from the various functions to ensure that notifications are being delivered in a timely fashion from when they are triggered, which is crucial for Stock Alerts’ primary function.&lt;/p&gt;

&lt;p&gt;That’s all for now. Thanks for reading.&lt;/p&gt;</content><author><name>Jon_Blankenship</name></author><category term="asp-net-core" /><category term="azure-functions" /><category term="azure-service-bus" /><category term="mvp" /><category term="azure-sql" /><category term="http-triggered-function" /><category term="infrastructure" /><category term="serverless" /><category term="service-bus-queue-triggered-function" /><category term="stock-alerts" /><category term="timer-triggered-function" /><summary type="html">We’ve talked about the features that we’ll be implementing in Stock Alerts. Today we’ll look at the infrastructure that will be needed to support those features.</summary></entry></feed>